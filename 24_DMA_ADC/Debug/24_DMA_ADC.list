
24_DMA_ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002588  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800271c  0800271c  0001271c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002734  08002734  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002734  08002734  00012734  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800273c  0800273c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800273c  0800273c  0001273c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002740  08002740  00012740  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002744  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000020c8  2000000c  08002750  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200020d4  08002750  000220d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00005c60  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001502  00000000  00000000  00025cdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000005a8  00000000  00000000  000271e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000428  00000000  00000000  00027790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000156f2  00000000  00000000  00027bb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00007281  00000000  00000000  0003d2aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008a9c5  00000000  00000000  0004452b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001578  00000000  00000000  000ceef0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000ba  00000000  00000000  000d0468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08002704 	.word	0x08002704

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08002704 	.word	0x08002704

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b970 	b.w	80004cc <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9e08      	ldr	r6, [sp, #32]
 800020a:	460d      	mov	r5, r1
 800020c:	4604      	mov	r4, r0
 800020e:	460f      	mov	r7, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14a      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000214:	428a      	cmp	r2, r1
 8000216:	4694      	mov	ip, r2
 8000218:	d965      	bls.n	80002e6 <__udivmoddi4+0xe2>
 800021a:	fab2 f382 	clz	r3, r2
 800021e:	b143      	cbz	r3, 8000232 <__udivmoddi4+0x2e>
 8000220:	fa02 fc03 	lsl.w	ip, r2, r3
 8000224:	f1c3 0220 	rsb	r2, r3, #32
 8000228:	409f      	lsls	r7, r3
 800022a:	fa20 f202 	lsr.w	r2, r0, r2
 800022e:	4317      	orrs	r7, r2
 8000230:	409c      	lsls	r4, r3
 8000232:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000236:	fa1f f58c 	uxth.w	r5, ip
 800023a:	fbb7 f1fe 	udiv	r1, r7, lr
 800023e:	0c22      	lsrs	r2, r4, #16
 8000240:	fb0e 7711 	mls	r7, lr, r1, r7
 8000244:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000248:	fb01 f005 	mul.w	r0, r1, r5
 800024c:	4290      	cmp	r0, r2
 800024e:	d90a      	bls.n	8000266 <__udivmoddi4+0x62>
 8000250:	eb1c 0202 	adds.w	r2, ip, r2
 8000254:	f101 37ff 	add.w	r7, r1, #4294967295
 8000258:	f080 811c 	bcs.w	8000494 <__udivmoddi4+0x290>
 800025c:	4290      	cmp	r0, r2
 800025e:	f240 8119 	bls.w	8000494 <__udivmoddi4+0x290>
 8000262:	3902      	subs	r1, #2
 8000264:	4462      	add	r2, ip
 8000266:	1a12      	subs	r2, r2, r0
 8000268:	b2a4      	uxth	r4, r4
 800026a:	fbb2 f0fe 	udiv	r0, r2, lr
 800026e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000272:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000276:	fb00 f505 	mul.w	r5, r0, r5
 800027a:	42a5      	cmp	r5, r4
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x90>
 800027e:	eb1c 0404 	adds.w	r4, ip, r4
 8000282:	f100 32ff 	add.w	r2, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x294>
 800028a:	42a5      	cmp	r5, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x294>
 8000290:	4464      	add	r4, ip
 8000292:	3802      	subs	r0, #2
 8000294:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000298:	1b64      	subs	r4, r4, r5
 800029a:	2100      	movs	r1, #0
 800029c:	b11e      	cbz	r6, 80002a6 <__udivmoddi4+0xa2>
 800029e:	40dc      	lsrs	r4, r3
 80002a0:	2300      	movs	r3, #0
 80002a2:	e9c6 4300 	strd	r4, r3, [r6]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d908      	bls.n	80002c0 <__udivmoddi4+0xbc>
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	f000 80ed 	beq.w	800048e <__udivmoddi4+0x28a>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	d149      	bne.n	800035c <__udivmoddi4+0x158>
 80002c8:	42ab      	cmp	r3, r5
 80002ca:	d302      	bcc.n	80002d2 <__udivmoddi4+0xce>
 80002cc:	4282      	cmp	r2, r0
 80002ce:	f200 80f8 	bhi.w	80004c2 <__udivmoddi4+0x2be>
 80002d2:	1a84      	subs	r4, r0, r2
 80002d4:	eb65 0203 	sbc.w	r2, r5, r3
 80002d8:	2001      	movs	r0, #1
 80002da:	4617      	mov	r7, r2
 80002dc:	2e00      	cmp	r6, #0
 80002de:	d0e2      	beq.n	80002a6 <__udivmoddi4+0xa2>
 80002e0:	e9c6 4700 	strd	r4, r7, [r6]
 80002e4:	e7df      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xe6>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f382 	clz	r3, r2
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x210>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2101      	movs	r1, #1
 8000300:	fbb2 f5f7 	udiv	r5, r2, r7
 8000304:	fb07 2015 	mls	r0, r7, r5, r2
 8000308:	0c22      	lsrs	r2, r4, #16
 800030a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030e:	fb0e f005 	mul.w	r0, lr, r5
 8000312:	4290      	cmp	r0, r2
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x124>
 8000316:	eb1c 0202 	adds.w	r2, ip, r2
 800031a:	f105 38ff 	add.w	r8, r5, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x122>
 8000320:	4290      	cmp	r0, r2
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2b8>
 8000326:	4645      	mov	r5, r8
 8000328:	1a12      	subs	r2, r2, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000330:	fb07 2210 	mls	r2, r7, r0, r2
 8000334:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x14e>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 32ff 	add.w	r2, r0, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x14c>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2c2>
 8000350:	4610      	mov	r0, r2
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035a:	e79f      	b.n	800029c <__udivmoddi4+0x98>
 800035c:	f1c1 0720 	rsb	r7, r1, #32
 8000360:	408b      	lsls	r3, r1
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa05 f401 	lsl.w	r4, r5, r1
 800036e:	fa20 f307 	lsr.w	r3, r0, r7
 8000372:	40fd      	lsrs	r5, r7
 8000374:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000378:	4323      	orrs	r3, r4
 800037a:	fbb5 f8f9 	udiv	r8, r5, r9
 800037e:	fa1f fe8c 	uxth.w	lr, ip
 8000382:	fb09 5518 	mls	r5, r9, r8, r5
 8000386:	0c1c      	lsrs	r4, r3, #16
 8000388:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800038c:	fb08 f50e 	mul.w	r5, r8, lr
 8000390:	42a5      	cmp	r5, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	fa00 f001 	lsl.w	r0, r0, r1
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b0>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2b4>
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2b4>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4464      	add	r4, ip
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	b29d      	uxth	r5, r3
 80003b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003bc:	fb09 4413 	mls	r4, r9, r3, r4
 80003c0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c8:	45a6      	cmp	lr, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1da>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2ac>
 80003d6:	45a6      	cmp	lr, r4
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2ac>
 80003da:	3b02      	subs	r3, #2
 80003dc:	4464      	add	r4, ip
 80003de:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e2:	fba3 9502 	umull	r9, r5, r3, r2
 80003e6:	eba4 040e 	sub.w	r4, r4, lr
 80003ea:	42ac      	cmp	r4, r5
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46ae      	mov	lr, r5
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x29c>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x298>
 80003f4:	b156      	cbz	r6, 800040c <__udivmoddi4+0x208>
 80003f6:	ebb0 0208 	subs.w	r2, r0, r8
 80003fa:	eb64 040e 	sbc.w	r4, r4, lr
 80003fe:	fa04 f707 	lsl.w	r7, r4, r7
 8000402:	40ca      	lsrs	r2, r1
 8000404:	40cc      	lsrs	r4, r1
 8000406:	4317      	orrs	r7, r2
 8000408:	e9c6 7400 	strd	r7, r4, [r6]
 800040c:	4618      	mov	r0, r3
 800040e:	2100      	movs	r1, #0
 8000410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000414:	f1c3 0120 	rsb	r1, r3, #32
 8000418:	fa02 fc03 	lsl.w	ip, r2, r3
 800041c:	fa20 f201 	lsr.w	r2, r0, r1
 8000420:	fa25 f101 	lsr.w	r1, r5, r1
 8000424:	409d      	lsls	r5, r3
 8000426:	432a      	orrs	r2, r5
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb1 f0f7 	udiv	r0, r1, r7
 8000434:	fb07 1510 	mls	r5, r7, r0, r1
 8000438:	0c11      	lsrs	r1, r2, #16
 800043a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043e:	fb00 f50e 	mul.w	r5, r0, lr
 8000442:	428d      	cmp	r5, r1
 8000444:	fa04 f403 	lsl.w	r4, r4, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x258>
 800044a:	eb1c 0101 	adds.w	r1, ip, r1
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000454:	428d      	cmp	r5, r1
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 8000458:	3802      	subs	r0, #2
 800045a:	4461      	add	r1, ip
 800045c:	1b49      	subs	r1, r1, r5
 800045e:	b292      	uxth	r2, r2
 8000460:	fbb1 f5f7 	udiv	r5, r1, r7
 8000464:	fb07 1115 	mls	r1, r7, r5, r1
 8000468:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800046c:	fb05 f10e 	mul.w	r1, r5, lr
 8000470:	4291      	cmp	r1, r2
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x282>
 8000474:	eb1c 0202 	adds.w	r2, ip, r2
 8000478:	f105 38ff 	add.w	r8, r5, #4294967295
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800047e:	4291      	cmp	r1, r2
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2a8>
 8000482:	3d02      	subs	r5, #2
 8000484:	4462      	add	r2, ip
 8000486:	1a52      	subs	r2, r2, r1
 8000488:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0xfc>
 800048e:	4631      	mov	r1, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e708      	b.n	80002a6 <__udivmoddi4+0xa2>
 8000494:	4639      	mov	r1, r7
 8000496:	e6e6      	b.n	8000266 <__udivmoddi4+0x62>
 8000498:	4610      	mov	r0, r2
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x90>
 800049c:	4548      	cmp	r0, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f0>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a8:	3b01      	subs	r3, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f0>
 80004ac:	4645      	mov	r5, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x282>
 80004b0:	462b      	mov	r3, r5
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1da>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x258>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b0>
 80004bc:	3d02      	subs	r5, #2
 80004be:	4462      	add	r2, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x124>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e70a      	b.n	80002dc <__udivmoddi4+0xd8>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x14e>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d4:	f000 fa56 	bl	8000984 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d8:	f000 f812 	bl	8000500 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004dc:	f000 f8e2 	bl	80006a4 <MX_GPIO_Init>
  MX_DMA_Init();
 80004e0:	f000 f8c0 	bl	8000664 <MX_DMA_Init>
  MX_ADC1_Init();
 80004e4:	f000 f86c 	bl	80005c0 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)data_read, long_buffer);
 80004e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80004ec:	4902      	ldr	r1, [pc, #8]	; (80004f8 <main+0x28>)
 80004ee:	4803      	ldr	r0, [pc, #12]	; (80004fc <main+0x2c>)
 80004f0:	f000 fafe 	bl	8000af0 <HAL_ADC_Start_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004f4:	e7fe      	b.n	80004f4 <main+0x24>
 80004f6:	bf00      	nop
 80004f8:	200000d0 	.word	0x200000d0
 80004fc:	20000028 	.word	0x20000028

08000500 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b094      	sub	sp, #80	; 0x50
 8000504:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000506:	f107 0320 	add.w	r3, r7, #32
 800050a:	2230      	movs	r2, #48	; 0x30
 800050c:	2100      	movs	r1, #0
 800050e:	4618      	mov	r0, r3
 8000510:	f002 f8cc 	bl	80026ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000514:	f107 030c 	add.w	r3, r7, #12
 8000518:	2200      	movs	r2, #0
 800051a:	601a      	str	r2, [r3, #0]
 800051c:	605a      	str	r2, [r3, #4]
 800051e:	609a      	str	r2, [r3, #8]
 8000520:	60da      	str	r2, [r3, #12]
 8000522:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000524:	2300      	movs	r3, #0
 8000526:	60bb      	str	r3, [r7, #8]
 8000528:	4b23      	ldr	r3, [pc, #140]	; (80005b8 <SystemClock_Config+0xb8>)
 800052a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800052c:	4a22      	ldr	r2, [pc, #136]	; (80005b8 <SystemClock_Config+0xb8>)
 800052e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000532:	6413      	str	r3, [r2, #64]	; 0x40
 8000534:	4b20      	ldr	r3, [pc, #128]	; (80005b8 <SystemClock_Config+0xb8>)
 8000536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000538:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800053c:	60bb      	str	r3, [r7, #8]
 800053e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000540:	2300      	movs	r3, #0
 8000542:	607b      	str	r3, [r7, #4]
 8000544:	4b1d      	ldr	r3, [pc, #116]	; (80005bc <SystemClock_Config+0xbc>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800054c:	4a1b      	ldr	r2, [pc, #108]	; (80005bc <SystemClock_Config+0xbc>)
 800054e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000552:	6013      	str	r3, [r2, #0]
 8000554:	4b19      	ldr	r3, [pc, #100]	; (80005bc <SystemClock_Config+0xbc>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800055c:	607b      	str	r3, [r7, #4]
 800055e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000560:	2302      	movs	r3, #2
 8000562:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000564:	2301      	movs	r3, #1
 8000566:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000568:	2310      	movs	r3, #16
 800056a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800056c:	2300      	movs	r3, #0
 800056e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000570:	f107 0320 	add.w	r3, r7, #32
 8000574:	4618      	mov	r0, r3
 8000576:	f001 fc75 	bl	8001e64 <HAL_RCC_OscConfig>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d001      	beq.n	8000584 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000580:	f000 f8e2 	bl	8000748 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000584:	230f      	movs	r3, #15
 8000586:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000588:	2300      	movs	r3, #0
 800058a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800058c:	2300      	movs	r3, #0
 800058e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000590:	2300      	movs	r3, #0
 8000592:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000594:	2300      	movs	r3, #0
 8000596:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000598:	f107 030c 	add.w	r3, r7, #12
 800059c:	2100      	movs	r1, #0
 800059e:	4618      	mov	r0, r3
 80005a0:	f001 fed8 	bl	8002354 <HAL_RCC_ClockConfig>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d001      	beq.n	80005ae <SystemClock_Config+0xae>
  {
    Error_Handler();
 80005aa:	f000 f8cd 	bl	8000748 <Error_Handler>
  }
}
 80005ae:	bf00      	nop
 80005b0:	3750      	adds	r7, #80	; 0x50
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	40023800 	.word	0x40023800
 80005bc:	40007000 	.word	0x40007000

080005c0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b084      	sub	sp, #16
 80005c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005c6:	463b      	mov	r3, r7
 80005c8:	2200      	movs	r2, #0
 80005ca:	601a      	str	r2, [r3, #0]
 80005cc:	605a      	str	r2, [r3, #4]
 80005ce:	609a      	str	r2, [r3, #8]
 80005d0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005d2:	4b21      	ldr	r3, [pc, #132]	; (8000658 <MX_ADC1_Init+0x98>)
 80005d4:	4a21      	ldr	r2, [pc, #132]	; (800065c <MX_ADC1_Init+0x9c>)
 80005d6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80005d8:	4b1f      	ldr	r3, [pc, #124]	; (8000658 <MX_ADC1_Init+0x98>)
 80005da:	2200      	movs	r2, #0
 80005dc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005de:	4b1e      	ldr	r3, [pc, #120]	; (8000658 <MX_ADC1_Init+0x98>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80005e4:	4b1c      	ldr	r3, [pc, #112]	; (8000658 <MX_ADC1_Init+0x98>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80005ea:	4b1b      	ldr	r3, [pc, #108]	; (8000658 <MX_ADC1_Init+0x98>)
 80005ec:	2201      	movs	r2, #1
 80005ee:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005f0:	4b19      	ldr	r3, [pc, #100]	; (8000658 <MX_ADC1_Init+0x98>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005f8:	4b17      	ldr	r3, [pc, #92]	; (8000658 <MX_ADC1_Init+0x98>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005fe:	4b16      	ldr	r3, [pc, #88]	; (8000658 <MX_ADC1_Init+0x98>)
 8000600:	4a17      	ldr	r2, [pc, #92]	; (8000660 <MX_ADC1_Init+0xa0>)
 8000602:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000604:	4b14      	ldr	r3, [pc, #80]	; (8000658 <MX_ADC1_Init+0x98>)
 8000606:	2200      	movs	r2, #0
 8000608:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800060a:	4b13      	ldr	r3, [pc, #76]	; (8000658 <MX_ADC1_Init+0x98>)
 800060c:	2201      	movs	r2, #1
 800060e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000610:	4b11      	ldr	r3, [pc, #68]	; (8000658 <MX_ADC1_Init+0x98>)
 8000612:	2201      	movs	r2, #1
 8000614:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000618:	4b0f      	ldr	r3, [pc, #60]	; (8000658 <MX_ADC1_Init+0x98>)
 800061a:	2201      	movs	r2, #1
 800061c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800061e:	480e      	ldr	r0, [pc, #56]	; (8000658 <MX_ADC1_Init+0x98>)
 8000620:	f000 fa22 	bl	8000a68 <HAL_ADC_Init>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800062a:	f000 f88d 	bl	8000748 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800062e:	2300      	movs	r3, #0
 8000630:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000632:	2301      	movs	r3, #1
 8000634:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000636:	2300      	movs	r3, #0
 8000638:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800063a:	463b      	mov	r3, r7
 800063c:	4619      	mov	r1, r3
 800063e:	4806      	ldr	r0, [pc, #24]	; (8000658 <MX_ADC1_Init+0x98>)
 8000640:	f000 fb50 	bl	8000ce4 <HAL_ADC_ConfigChannel>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800064a:	f000 f87d 	bl	8000748 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800064e:	bf00      	nop
 8000650:	3710      	adds	r7, #16
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	20000028 	.word	0x20000028
 800065c:	40012000 	.word	0x40012000
 8000660:	0f000001 	.word	0x0f000001

08000664 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800066a:	2300      	movs	r3, #0
 800066c:	607b      	str	r3, [r7, #4]
 800066e:	4b0c      	ldr	r3, [pc, #48]	; (80006a0 <MX_DMA_Init+0x3c>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000672:	4a0b      	ldr	r2, [pc, #44]	; (80006a0 <MX_DMA_Init+0x3c>)
 8000674:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000678:	6313      	str	r3, [r2, #48]	; 0x30
 800067a:	4b09      	ldr	r3, [pc, #36]	; (80006a0 <MX_DMA_Init+0x3c>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000682:	607b      	str	r3, [r7, #4]
 8000684:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000686:	2200      	movs	r2, #0
 8000688:	2100      	movs	r1, #0
 800068a:	2038      	movs	r0, #56	; 0x38
 800068c:	f000 fea5 	bl	80013da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000690:	2038      	movs	r0, #56	; 0x38
 8000692:	f000 febe 	bl	8001412 <HAL_NVIC_EnableIRQ>

}
 8000696:	bf00      	nop
 8000698:	3708      	adds	r7, #8
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	40023800 	.word	0x40023800

080006a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b086      	sub	sp, #24
 80006a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006aa:	1d3b      	adds	r3, r7, #4
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
 80006b0:	605a      	str	r2, [r3, #4]
 80006b2:	609a      	str	r2, [r3, #8]
 80006b4:	60da      	str	r2, [r3, #12]
 80006b6:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b8:	2300      	movs	r3, #0
 80006ba:	603b      	str	r3, [r7, #0]
 80006bc:	4b10      	ldr	r3, [pc, #64]	; (8000700 <MX_GPIO_Init+0x5c>)
 80006be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c0:	4a0f      	ldr	r2, [pc, #60]	; (8000700 <MX_GPIO_Init+0x5c>)
 80006c2:	f043 0301 	orr.w	r3, r3, #1
 80006c6:	6313      	str	r3, [r2, #48]	; 0x30
 80006c8:	4b0d      	ldr	r3, [pc, #52]	; (8000700 <MX_GPIO_Init+0x5c>)
 80006ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006cc:	f003 0301 	and.w	r3, r3, #1
 80006d0:	603b      	str	r3, [r7, #0]
 80006d2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80006d4:	2200      	movs	r2, #0
 80006d6:	2120      	movs	r1, #32
 80006d8:	480a      	ldr	r0, [pc, #40]	; (8000704 <MX_GPIO_Init+0x60>)
 80006da:	f001 fba9 	bl	8001e30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80006de:	2320      	movs	r3, #32
 80006e0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e2:	2301      	movs	r3, #1
 80006e4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e6:	2300      	movs	r3, #0
 80006e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ea:	2300      	movs	r3, #0
 80006ec:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80006ee:	1d3b      	adds	r3, r7, #4
 80006f0:	4619      	mov	r1, r3
 80006f2:	4804      	ldr	r0, [pc, #16]	; (8000704 <MX_GPIO_Init+0x60>)
 80006f4:	f001 fa18 	bl	8001b28 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006f8:	bf00      	nop
 80006fa:	3718      	adds	r7, #24
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	40023800 	.word	0x40023800
 8000704:	40020000 	.word	0x40020000

08000708 <HAL_ADC_ConvHalfCpltCallback>:
/* USER CODE BEGIN 4 */



void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 8000710:	2200      	movs	r2, #0
 8000712:	2120      	movs	r1, #32
 8000714:	4803      	ldr	r0, [pc, #12]	; (8000724 <HAL_ADC_ConvHalfCpltCallback+0x1c>)
 8000716:	f001 fb8b 	bl	8001e30 <HAL_GPIO_WritePin>
}
 800071a:	bf00      	nop
 800071c:	3708      	adds	r7, #8
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	40020000 	.word	0x40020000

08000728 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 8000730:	2201      	movs	r2, #1
 8000732:	2120      	movs	r1, #32
 8000734:	4803      	ldr	r0, [pc, #12]	; (8000744 <HAL_ADC_ConvCpltCallback+0x1c>)
 8000736:	f001 fb7b 	bl	8001e30 <HAL_GPIO_WritePin>
}
 800073a:	bf00      	nop
 800073c:	3708      	adds	r7, #8
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	40020000 	.word	0x40020000

08000748 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800074c:	b672      	cpsid	i
}
 800074e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000750:	e7fe      	b.n	8000750 <Error_Handler+0x8>
	...

08000754 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000754:	b480      	push	{r7}
 8000756:	b083      	sub	sp, #12
 8000758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	607b      	str	r3, [r7, #4]
 800075e:	4b10      	ldr	r3, [pc, #64]	; (80007a0 <HAL_MspInit+0x4c>)
 8000760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000762:	4a0f      	ldr	r2, [pc, #60]	; (80007a0 <HAL_MspInit+0x4c>)
 8000764:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000768:	6453      	str	r3, [r2, #68]	; 0x44
 800076a:	4b0d      	ldr	r3, [pc, #52]	; (80007a0 <HAL_MspInit+0x4c>)
 800076c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800076e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000772:	607b      	str	r3, [r7, #4]
 8000774:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	603b      	str	r3, [r7, #0]
 800077a:	4b09      	ldr	r3, [pc, #36]	; (80007a0 <HAL_MspInit+0x4c>)
 800077c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800077e:	4a08      	ldr	r2, [pc, #32]	; (80007a0 <HAL_MspInit+0x4c>)
 8000780:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000784:	6413      	str	r3, [r2, #64]	; 0x40
 8000786:	4b06      	ldr	r3, [pc, #24]	; (80007a0 <HAL_MspInit+0x4c>)
 8000788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800078a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800078e:	603b      	str	r3, [r7, #0]
 8000790:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000792:	bf00      	nop
 8000794:	370c      	adds	r7, #12
 8000796:	46bd      	mov	sp, r7
 8000798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079c:	4770      	bx	lr
 800079e:	bf00      	nop
 80007a0:	40023800 	.word	0x40023800

080007a4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b08a      	sub	sp, #40	; 0x28
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ac:	f107 0314 	add.w	r3, r7, #20
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
 80007b4:	605a      	str	r2, [r3, #4]
 80007b6:	609a      	str	r2, [r3, #8]
 80007b8:	60da      	str	r2, [r3, #12]
 80007ba:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a33      	ldr	r2, [pc, #204]	; (8000890 <HAL_ADC_MspInit+0xec>)
 80007c2:	4293      	cmp	r3, r2
 80007c4:	d160      	bne.n	8000888 <HAL_ADC_MspInit+0xe4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	613b      	str	r3, [r7, #16]
 80007ca:	4b32      	ldr	r3, [pc, #200]	; (8000894 <HAL_ADC_MspInit+0xf0>)
 80007cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ce:	4a31      	ldr	r2, [pc, #196]	; (8000894 <HAL_ADC_MspInit+0xf0>)
 80007d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007d4:	6453      	str	r3, [r2, #68]	; 0x44
 80007d6:	4b2f      	ldr	r3, [pc, #188]	; (8000894 <HAL_ADC_MspInit+0xf0>)
 80007d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80007de:	613b      	str	r3, [r7, #16]
 80007e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	60fb      	str	r3, [r7, #12]
 80007e6:	4b2b      	ldr	r3, [pc, #172]	; (8000894 <HAL_ADC_MspInit+0xf0>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	4a2a      	ldr	r2, [pc, #168]	; (8000894 <HAL_ADC_MspInit+0xf0>)
 80007ec:	f043 0301 	orr.w	r3, r3, #1
 80007f0:	6313      	str	r3, [r2, #48]	; 0x30
 80007f2:	4b28      	ldr	r3, [pc, #160]	; (8000894 <HAL_ADC_MspInit+0xf0>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	f003 0301 	and.w	r3, r3, #1
 80007fa:	60fb      	str	r3, [r7, #12]
 80007fc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007fe:	2301      	movs	r3, #1
 8000800:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000802:	2303      	movs	r3, #3
 8000804:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000806:	2300      	movs	r3, #0
 8000808:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800080a:	f107 0314 	add.w	r3, r7, #20
 800080e:	4619      	mov	r1, r3
 8000810:	4821      	ldr	r0, [pc, #132]	; (8000898 <HAL_ADC_MspInit+0xf4>)
 8000812:	f001 f989 	bl	8001b28 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000816:	4b21      	ldr	r3, [pc, #132]	; (800089c <HAL_ADC_MspInit+0xf8>)
 8000818:	4a21      	ldr	r2, [pc, #132]	; (80008a0 <HAL_ADC_MspInit+0xfc>)
 800081a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800081c:	4b1f      	ldr	r3, [pc, #124]	; (800089c <HAL_ADC_MspInit+0xf8>)
 800081e:	2200      	movs	r2, #0
 8000820:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000822:	4b1e      	ldr	r3, [pc, #120]	; (800089c <HAL_ADC_MspInit+0xf8>)
 8000824:	2200      	movs	r2, #0
 8000826:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000828:	4b1c      	ldr	r3, [pc, #112]	; (800089c <HAL_ADC_MspInit+0xf8>)
 800082a:	2200      	movs	r2, #0
 800082c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800082e:	4b1b      	ldr	r3, [pc, #108]	; (800089c <HAL_ADC_MspInit+0xf8>)
 8000830:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000834:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000836:	4b19      	ldr	r3, [pc, #100]	; (800089c <HAL_ADC_MspInit+0xf8>)
 8000838:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800083c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800083e:	4b17      	ldr	r3, [pc, #92]	; (800089c <HAL_ADC_MspInit+0xf8>)
 8000840:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000844:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000846:	4b15      	ldr	r3, [pc, #84]	; (800089c <HAL_ADC_MspInit+0xf8>)
 8000848:	f44f 7280 	mov.w	r2, #256	; 0x100
 800084c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800084e:	4b13      	ldr	r3, [pc, #76]	; (800089c <HAL_ADC_MspInit+0xf8>)
 8000850:	2200      	movs	r2, #0
 8000852:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000854:	4b11      	ldr	r3, [pc, #68]	; (800089c <HAL_ADC_MspInit+0xf8>)
 8000856:	2204      	movs	r2, #4
 8000858:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800085a:	4b10      	ldr	r3, [pc, #64]	; (800089c <HAL_ADC_MspInit+0xf8>)
 800085c:	2203      	movs	r2, #3
 800085e:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_adc1.Init.MemBurst = DMA_MBURST_SINGLE;
 8000860:	4b0e      	ldr	r3, [pc, #56]	; (800089c <HAL_ADC_MspInit+0xf8>)
 8000862:	2200      	movs	r2, #0
 8000864:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000866:	4b0d      	ldr	r3, [pc, #52]	; (800089c <HAL_ADC_MspInit+0xf8>)
 8000868:	2200      	movs	r2, #0
 800086a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800086c:	480b      	ldr	r0, [pc, #44]	; (800089c <HAL_ADC_MspInit+0xf8>)
 800086e:	f000 fdeb 	bl	8001448 <HAL_DMA_Init>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <HAL_ADC_MspInit+0xd8>
    {
      Error_Handler();
 8000878:	f7ff ff66 	bl	8000748 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	4a07      	ldr	r2, [pc, #28]	; (800089c <HAL_ADC_MspInit+0xf8>)
 8000880:	639a      	str	r2, [r3, #56]	; 0x38
 8000882:	4a06      	ldr	r2, [pc, #24]	; (800089c <HAL_ADC_MspInit+0xf8>)
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000888:	bf00      	nop
 800088a:	3728      	adds	r7, #40	; 0x28
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	40012000 	.word	0x40012000
 8000894:	40023800 	.word	0x40023800
 8000898:	40020000 	.word	0x40020000
 800089c:	20000070 	.word	0x20000070
 80008a0:	40026410 	.word	0x40026410

080008a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008a8:	e7fe      	b.n	80008a8 <NMI_Handler+0x4>

080008aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008aa:	b480      	push	{r7}
 80008ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ae:	e7fe      	b.n	80008ae <HardFault_Handler+0x4>

080008b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008b4:	e7fe      	b.n	80008b4 <MemManage_Handler+0x4>

080008b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008b6:	b480      	push	{r7}
 80008b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008ba:	e7fe      	b.n	80008ba <BusFault_Handler+0x4>

080008bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008c0:	e7fe      	b.n	80008c0 <UsageFault_Handler+0x4>

080008c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008c2:	b480      	push	{r7}
 80008c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008c6:	bf00      	nop
 80008c8:	46bd      	mov	sp, r7
 80008ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ce:	4770      	bx	lr

080008d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008d4:	bf00      	nop
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr

080008de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008de:	b480      	push	{r7}
 80008e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008e2:	bf00      	nop
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr

080008ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008f0:	f000 f89a 	bl	8000a28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008f4:	bf00      	nop
 80008f6:	bd80      	pop	{r7, pc}

080008f8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80008fc:	4802      	ldr	r0, [pc, #8]	; (8000908 <DMA2_Stream0_IRQHandler+0x10>)
 80008fe:	f000 fea9 	bl	8001654 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000902:	bf00      	nop
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	20000070 	.word	0x20000070

0800090c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000910:	4b06      	ldr	r3, [pc, #24]	; (800092c <SystemInit+0x20>)
 8000912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000916:	4a05      	ldr	r2, [pc, #20]	; (800092c <SystemInit+0x20>)
 8000918:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800091c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000920:	bf00      	nop
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	e000ed00 	.word	0xe000ed00

08000930 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000930:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000968 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000934:	f7ff ffea 	bl	800090c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000938:	480c      	ldr	r0, [pc, #48]	; (800096c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800093a:	490d      	ldr	r1, [pc, #52]	; (8000970 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800093c:	4a0d      	ldr	r2, [pc, #52]	; (8000974 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800093e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000940:	e002      	b.n	8000948 <LoopCopyDataInit>

08000942 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000942:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000944:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000946:	3304      	adds	r3, #4

08000948 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000948:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800094a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800094c:	d3f9      	bcc.n	8000942 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800094e:	4a0a      	ldr	r2, [pc, #40]	; (8000978 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000950:	4c0a      	ldr	r4, [pc, #40]	; (800097c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000952:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000954:	e001      	b.n	800095a <LoopFillZerobss>

08000956 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000956:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000958:	3204      	adds	r2, #4

0800095a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800095a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800095c:	d3fb      	bcc.n	8000956 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800095e:	f001 fead 	bl	80026bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000962:	f7ff fdb5 	bl	80004d0 <main>
  bx  lr    
 8000966:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000968:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800096c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000970:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000974:	08002744 	.word	0x08002744
  ldr r2, =_sbss
 8000978:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800097c:	200020d4 	.word	0x200020d4

08000980 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000980:	e7fe      	b.n	8000980 <ADC_IRQHandler>
	...

08000984 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000988:	4b0e      	ldr	r3, [pc, #56]	; (80009c4 <HAL_Init+0x40>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4a0d      	ldr	r2, [pc, #52]	; (80009c4 <HAL_Init+0x40>)
 800098e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000992:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000994:	4b0b      	ldr	r3, [pc, #44]	; (80009c4 <HAL_Init+0x40>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a0a      	ldr	r2, [pc, #40]	; (80009c4 <HAL_Init+0x40>)
 800099a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800099e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009a0:	4b08      	ldr	r3, [pc, #32]	; (80009c4 <HAL_Init+0x40>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a07      	ldr	r2, [pc, #28]	; (80009c4 <HAL_Init+0x40>)
 80009a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009ac:	2003      	movs	r0, #3
 80009ae:	f000 fd09 	bl	80013c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009b2:	200f      	movs	r0, #15
 80009b4:	f000 f808 	bl	80009c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009b8:	f7ff fecc 	bl	8000754 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009bc:	2300      	movs	r3, #0
}
 80009be:	4618      	mov	r0, r3
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	40023c00 	.word	0x40023c00

080009c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009d0:	4b12      	ldr	r3, [pc, #72]	; (8000a1c <HAL_InitTick+0x54>)
 80009d2:	681a      	ldr	r2, [r3, #0]
 80009d4:	4b12      	ldr	r3, [pc, #72]	; (8000a20 <HAL_InitTick+0x58>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	4619      	mov	r1, r3
 80009da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009de:	fbb3 f3f1 	udiv	r3, r3, r1
 80009e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80009e6:	4618      	mov	r0, r3
 80009e8:	f000 fd21 	bl	800142e <HAL_SYSTICK_Config>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009f2:	2301      	movs	r3, #1
 80009f4:	e00e      	b.n	8000a14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	2b0f      	cmp	r3, #15
 80009fa:	d80a      	bhi.n	8000a12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009fc:	2200      	movs	r2, #0
 80009fe:	6879      	ldr	r1, [r7, #4]
 8000a00:	f04f 30ff 	mov.w	r0, #4294967295
 8000a04:	f000 fce9 	bl	80013da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a08:	4a06      	ldr	r2, [pc, #24]	; (8000a24 <HAL_InitTick+0x5c>)
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	e000      	b.n	8000a14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a12:	2301      	movs	r3, #1
}
 8000a14:	4618      	mov	r0, r3
 8000a16:	3708      	adds	r7, #8
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	20000000 	.word	0x20000000
 8000a20:	20000008 	.word	0x20000008
 8000a24:	20000004 	.word	0x20000004

08000a28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a2c:	4b06      	ldr	r3, [pc, #24]	; (8000a48 <HAL_IncTick+0x20>)
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	461a      	mov	r2, r3
 8000a32:	4b06      	ldr	r3, [pc, #24]	; (8000a4c <HAL_IncTick+0x24>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	4413      	add	r3, r2
 8000a38:	4a04      	ldr	r2, [pc, #16]	; (8000a4c <HAL_IncTick+0x24>)
 8000a3a:	6013      	str	r3, [r2, #0]
}
 8000a3c:	bf00      	nop
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	20000008 	.word	0x20000008
 8000a4c:	200020d0 	.word	0x200020d0

08000a50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  return uwTick;
 8000a54:	4b03      	ldr	r3, [pc, #12]	; (8000a64 <HAL_GetTick+0x14>)
 8000a56:	681b      	ldr	r3, [r3, #0]
}
 8000a58:	4618      	mov	r0, r3
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	200020d0 	.word	0x200020d0

08000a68 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b084      	sub	sp, #16
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a70:	2300      	movs	r3, #0
 8000a72:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d101      	bne.n	8000a7e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	e033      	b.n	8000ae6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d109      	bne.n	8000a9a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000a86:	6878      	ldr	r0, [r7, #4]
 8000a88:	f7ff fe8c 	bl	80007a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	2200      	movs	r2, #0
 8000a90:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	2200      	movs	r2, #0
 8000a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9e:	f003 0310 	and.w	r3, r3, #16
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d118      	bne.n	8000ad8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aaa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000aae:	f023 0302 	bic.w	r3, r3, #2
 8000ab2:	f043 0202 	orr.w	r2, r3, #2
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8000aba:	6878      	ldr	r0, [r7, #4]
 8000abc:	f000 fa34 	bl	8000f28 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aca:	f023 0303 	bic.w	r3, r3, #3
 8000ace:	f043 0201 	orr.w	r2, r3, #1
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	641a      	str	r2, [r3, #64]	; 0x40
 8000ad6:	e001      	b.n	8000adc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000ad8:	2301      	movs	r3, #1
 8000ada:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	2200      	movs	r2, #0
 8000ae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000ae4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	3710      	adds	r7, #16
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
	...

08000af0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b086      	sub	sp, #24
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	60f8      	str	r0, [r7, #12]
 8000af8:	60b9      	str	r1, [r7, #8]
 8000afa:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8000afc:	2300      	movs	r3, #0
 8000afe:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000b06:	2b01      	cmp	r3, #1
 8000b08:	d101      	bne.n	8000b0e <HAL_ADC_Start_DMA+0x1e>
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	e0ce      	b.n	8000cac <HAL_ADC_Start_DMA+0x1bc>
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	2201      	movs	r2, #1
 8000b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	689b      	ldr	r3, [r3, #8]
 8000b1c:	f003 0301 	and.w	r3, r3, #1
 8000b20:	2b01      	cmp	r3, #1
 8000b22:	d018      	beq.n	8000b56 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	689a      	ldr	r2, [r3, #8]
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	f042 0201 	orr.w	r2, r2, #1
 8000b32:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000b34:	4b5f      	ldr	r3, [pc, #380]	; (8000cb4 <HAL_ADC_Start_DMA+0x1c4>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a5f      	ldr	r2, [pc, #380]	; (8000cb8 <HAL_ADC_Start_DMA+0x1c8>)
 8000b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8000b3e:	0c9a      	lsrs	r2, r3, #18
 8000b40:	4613      	mov	r3, r2
 8000b42:	005b      	lsls	r3, r3, #1
 8000b44:	4413      	add	r3, r2
 8000b46:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8000b48:	e002      	b.n	8000b50 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8000b4a:	693b      	ldr	r3, [r7, #16]
 8000b4c:	3b01      	subs	r3, #1
 8000b4e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8000b50:	693b      	ldr	r3, [r7, #16]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d1f9      	bne.n	8000b4a <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	689b      	ldr	r3, [r3, #8]
 8000b5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000b64:	d107      	bne.n	8000b76 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	689a      	ldr	r2, [r3, #8]
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000b74:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	689b      	ldr	r3, [r3, #8]
 8000b7c:	f003 0301 	and.w	r3, r3, #1
 8000b80:	2b01      	cmp	r3, #1
 8000b82:	f040 8086 	bne.w	8000c92 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000b8e:	f023 0301 	bic.w	r3, r3, #1
 8000b92:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	685b      	ldr	r3, [r3, #4]
 8000ba0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d007      	beq.n	8000bb8 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bac:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000bb0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bbc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000bc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000bc4:	d106      	bne.n	8000bd4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bca:	f023 0206 	bic.w	r2, r3, #6
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	645a      	str	r2, [r3, #68]	; 0x44
 8000bd2:	e002      	b.n	8000bda <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	2200      	movs	r2, #0
 8000bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000be2:	4b36      	ldr	r3, [pc, #216]	; (8000cbc <HAL_ADC_Start_DMA+0x1cc>)
 8000be4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000bea:	4a35      	ldr	r2, [pc, #212]	; (8000cc0 <HAL_ADC_Start_DMA+0x1d0>)
 8000bec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000bf2:	4a34      	ldr	r2, [pc, #208]	; (8000cc4 <HAL_ADC_Start_DMA+0x1d4>)
 8000bf4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000bfa:	4a33      	ldr	r2, [pc, #204]	; (8000cc8 <HAL_ADC_Start_DMA+0x1d8>)
 8000bfc:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000c06:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	685a      	ldr	r2, [r3, #4]
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8000c16:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	689a      	ldr	r2, [r3, #8]
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000c26:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	334c      	adds	r3, #76	; 0x4c
 8000c32:	4619      	mov	r1, r3
 8000c34:	68ba      	ldr	r2, [r7, #8]
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	f000 fcb4 	bl	80015a4 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	685b      	ldr	r3, [r3, #4]
 8000c40:	f003 031f 	and.w	r3, r3, #31
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d10f      	bne.n	8000c68 <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	689b      	ldr	r3, [r3, #8]
 8000c4e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d129      	bne.n	8000caa <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	689a      	ldr	r2, [r3, #8]
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000c64:	609a      	str	r2, [r3, #8]
 8000c66:	e020      	b.n	8000caa <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a17      	ldr	r2, [pc, #92]	; (8000ccc <HAL_ADC_Start_DMA+0x1dc>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d11b      	bne.n	8000caa <HAL_ADC_Start_DMA+0x1ba>
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	689b      	ldr	r3, [r3, #8]
 8000c78:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d114      	bne.n	8000caa <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	689a      	ldr	r2, [r3, #8]
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000c8e:	609a      	str	r2, [r3, #8]
 8000c90:	e00b      	b.n	8000caa <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c96:	f043 0210 	orr.w	r2, r3, #16
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ca2:	f043 0201 	orr.w	r2, r3, #1
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8000caa:	2300      	movs	r3, #0
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	3718      	adds	r7, #24
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	20000000 	.word	0x20000000
 8000cb8:	431bde83 	.word	0x431bde83
 8000cbc:	40012300 	.word	0x40012300
 8000cc0:	08001121 	.word	0x08001121
 8000cc4:	080011db 	.word	0x080011db
 8000cc8:	080011f7 	.word	0x080011f7
 8000ccc:	40012000 	.word	0x40012000

08000cd0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8000cd8:	bf00      	nop
 8000cda:	370c      	adds	r7, #12
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr

08000ce4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b085      	sub	sp, #20
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
 8000cec:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000cf8:	2b01      	cmp	r3, #1
 8000cfa:	d101      	bne.n	8000d00 <HAL_ADC_ConfigChannel+0x1c>
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	e105      	b.n	8000f0c <HAL_ADC_ConfigChannel+0x228>
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	2201      	movs	r2, #1
 8000d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	2b09      	cmp	r3, #9
 8000d0e:	d925      	bls.n	8000d5c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	68d9      	ldr	r1, [r3, #12]
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	b29b      	uxth	r3, r3
 8000d1c:	461a      	mov	r2, r3
 8000d1e:	4613      	mov	r3, r2
 8000d20:	005b      	lsls	r3, r3, #1
 8000d22:	4413      	add	r3, r2
 8000d24:	3b1e      	subs	r3, #30
 8000d26:	2207      	movs	r2, #7
 8000d28:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2c:	43da      	mvns	r2, r3
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	400a      	ands	r2, r1
 8000d34:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	68d9      	ldr	r1, [r3, #12]
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	689a      	ldr	r2, [r3, #8]
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	b29b      	uxth	r3, r3
 8000d46:	4618      	mov	r0, r3
 8000d48:	4603      	mov	r3, r0
 8000d4a:	005b      	lsls	r3, r3, #1
 8000d4c:	4403      	add	r3, r0
 8000d4e:	3b1e      	subs	r3, #30
 8000d50:	409a      	lsls	r2, r3
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	430a      	orrs	r2, r1
 8000d58:	60da      	str	r2, [r3, #12]
 8000d5a:	e022      	b.n	8000da2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	6919      	ldr	r1, [r3, #16]
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	b29b      	uxth	r3, r3
 8000d68:	461a      	mov	r2, r3
 8000d6a:	4613      	mov	r3, r2
 8000d6c:	005b      	lsls	r3, r3, #1
 8000d6e:	4413      	add	r3, r2
 8000d70:	2207      	movs	r2, #7
 8000d72:	fa02 f303 	lsl.w	r3, r2, r3
 8000d76:	43da      	mvns	r2, r3
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	400a      	ands	r2, r1
 8000d7e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	6919      	ldr	r1, [r3, #16]
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	689a      	ldr	r2, [r3, #8]
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	b29b      	uxth	r3, r3
 8000d90:	4618      	mov	r0, r3
 8000d92:	4603      	mov	r3, r0
 8000d94:	005b      	lsls	r3, r3, #1
 8000d96:	4403      	add	r3, r0
 8000d98:	409a      	lsls	r2, r3
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	430a      	orrs	r2, r1
 8000da0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	2b06      	cmp	r3, #6
 8000da8:	d824      	bhi.n	8000df4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	685a      	ldr	r2, [r3, #4]
 8000db4:	4613      	mov	r3, r2
 8000db6:	009b      	lsls	r3, r3, #2
 8000db8:	4413      	add	r3, r2
 8000dba:	3b05      	subs	r3, #5
 8000dbc:	221f      	movs	r2, #31
 8000dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc2:	43da      	mvns	r2, r3
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	400a      	ands	r2, r1
 8000dca:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	b29b      	uxth	r3, r3
 8000dd8:	4618      	mov	r0, r3
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	685a      	ldr	r2, [r3, #4]
 8000dde:	4613      	mov	r3, r2
 8000de0:	009b      	lsls	r3, r3, #2
 8000de2:	4413      	add	r3, r2
 8000de4:	3b05      	subs	r3, #5
 8000de6:	fa00 f203 	lsl.w	r2, r0, r3
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	430a      	orrs	r2, r1
 8000df0:	635a      	str	r2, [r3, #52]	; 0x34
 8000df2:	e04c      	b.n	8000e8e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	2b0c      	cmp	r3, #12
 8000dfa:	d824      	bhi.n	8000e46 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	685a      	ldr	r2, [r3, #4]
 8000e06:	4613      	mov	r3, r2
 8000e08:	009b      	lsls	r3, r3, #2
 8000e0a:	4413      	add	r3, r2
 8000e0c:	3b23      	subs	r3, #35	; 0x23
 8000e0e:	221f      	movs	r2, #31
 8000e10:	fa02 f303 	lsl.w	r3, r2, r3
 8000e14:	43da      	mvns	r2, r3
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	400a      	ands	r2, r1
 8000e1c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	b29b      	uxth	r3, r3
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	685a      	ldr	r2, [r3, #4]
 8000e30:	4613      	mov	r3, r2
 8000e32:	009b      	lsls	r3, r3, #2
 8000e34:	4413      	add	r3, r2
 8000e36:	3b23      	subs	r3, #35	; 0x23
 8000e38:	fa00 f203 	lsl.w	r2, r0, r3
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	430a      	orrs	r2, r1
 8000e42:	631a      	str	r2, [r3, #48]	; 0x30
 8000e44:	e023      	b.n	8000e8e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	685a      	ldr	r2, [r3, #4]
 8000e50:	4613      	mov	r3, r2
 8000e52:	009b      	lsls	r3, r3, #2
 8000e54:	4413      	add	r3, r2
 8000e56:	3b41      	subs	r3, #65	; 0x41
 8000e58:	221f      	movs	r2, #31
 8000e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5e:	43da      	mvns	r2, r3
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	400a      	ands	r2, r1
 8000e66:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	b29b      	uxth	r3, r3
 8000e74:	4618      	mov	r0, r3
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	685a      	ldr	r2, [r3, #4]
 8000e7a:	4613      	mov	r3, r2
 8000e7c:	009b      	lsls	r3, r3, #2
 8000e7e:	4413      	add	r3, r2
 8000e80:	3b41      	subs	r3, #65	; 0x41
 8000e82:	fa00 f203 	lsl.w	r2, r0, r3
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	430a      	orrs	r2, r1
 8000e8c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000e8e:	4b22      	ldr	r3, [pc, #136]	; (8000f18 <HAL_ADC_ConfigChannel+0x234>)
 8000e90:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4a21      	ldr	r2, [pc, #132]	; (8000f1c <HAL_ADC_ConfigChannel+0x238>)
 8000e98:	4293      	cmp	r3, r2
 8000e9a:	d109      	bne.n	8000eb0 <HAL_ADC_ConfigChannel+0x1cc>
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	2b12      	cmp	r3, #18
 8000ea2:	d105      	bne.n	8000eb0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a19      	ldr	r2, [pc, #100]	; (8000f1c <HAL_ADC_ConfigChannel+0x238>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d123      	bne.n	8000f02 <HAL_ADC_ConfigChannel+0x21e>
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	2b10      	cmp	r3, #16
 8000ec0:	d003      	beq.n	8000eca <HAL_ADC_ConfigChannel+0x1e6>
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	2b11      	cmp	r3, #17
 8000ec8:	d11b      	bne.n	8000f02 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	2b10      	cmp	r3, #16
 8000edc:	d111      	bne.n	8000f02 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000ede:	4b10      	ldr	r3, [pc, #64]	; (8000f20 <HAL_ADC_ConfigChannel+0x23c>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4a10      	ldr	r2, [pc, #64]	; (8000f24 <HAL_ADC_ConfigChannel+0x240>)
 8000ee4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ee8:	0c9a      	lsrs	r2, r3, #18
 8000eea:	4613      	mov	r3, r2
 8000eec:	009b      	lsls	r3, r3, #2
 8000eee:	4413      	add	r3, r2
 8000ef0:	005b      	lsls	r3, r3, #1
 8000ef2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8000ef4:	e002      	b.n	8000efc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8000ef6:	68bb      	ldr	r3, [r7, #8]
 8000ef8:	3b01      	subs	r3, #1
 8000efa:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d1f9      	bne.n	8000ef6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	2200      	movs	r2, #0
 8000f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8000f0a:	2300      	movs	r3, #0
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	3714      	adds	r7, #20
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr
 8000f18:	40012300 	.word	0x40012300
 8000f1c:	40012000 	.word	0x40012000
 8000f20:	20000000 	.word	0x20000000
 8000f24:	431bde83 	.word	0x431bde83

08000f28 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b085      	sub	sp, #20
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000f30:	4b79      	ldr	r3, [pc, #484]	; (8001118 <ADC_Init+0x1f0>)
 8000f32:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	685a      	ldr	r2, [r3, #4]
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	431a      	orrs	r2, r3
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	685a      	ldr	r2, [r3, #4]
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000f5c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	6859      	ldr	r1, [r3, #4]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	691b      	ldr	r3, [r3, #16]
 8000f68:	021a      	lsls	r2, r3, #8
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	430a      	orrs	r2, r1
 8000f70:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	685a      	ldr	r2, [r3, #4]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000f80:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	6859      	ldr	r1, [r3, #4]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	689a      	ldr	r2, [r3, #8]
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	430a      	orrs	r2, r1
 8000f92:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	689a      	ldr	r2, [r3, #8]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000fa2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	6899      	ldr	r1, [r3, #8]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	68da      	ldr	r2, [r3, #12]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	430a      	orrs	r2, r1
 8000fb4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fba:	4a58      	ldr	r2, [pc, #352]	; (800111c <ADC_Init+0x1f4>)
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d022      	beq.n	8001006 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	689a      	ldr	r2, [r3, #8]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000fce:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	6899      	ldr	r1, [r3, #8]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	430a      	orrs	r2, r1
 8000fe0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	689a      	ldr	r2, [r3, #8]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000ff0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	6899      	ldr	r1, [r3, #8]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	430a      	orrs	r2, r1
 8001002:	609a      	str	r2, [r3, #8]
 8001004:	e00f      	b.n	8001026 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	689a      	ldr	r2, [r3, #8]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001014:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	689a      	ldr	r2, [r3, #8]
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001024:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	689a      	ldr	r2, [r3, #8]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f022 0202 	bic.w	r2, r2, #2
 8001034:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	6899      	ldr	r1, [r3, #8]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	7e1b      	ldrb	r3, [r3, #24]
 8001040:	005a      	lsls	r2, r3, #1
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	430a      	orrs	r2, r1
 8001048:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d01b      	beq.n	800108c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	685a      	ldr	r2, [r3, #4]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001062:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	685a      	ldr	r2, [r3, #4]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001072:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	6859      	ldr	r1, [r3, #4]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800107e:	3b01      	subs	r3, #1
 8001080:	035a      	lsls	r2, r3, #13
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	430a      	orrs	r2, r1
 8001088:	605a      	str	r2, [r3, #4]
 800108a:	e007      	b.n	800109c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	685a      	ldr	r2, [r3, #4]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800109a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80010aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	69db      	ldr	r3, [r3, #28]
 80010b6:	3b01      	subs	r3, #1
 80010b8:	051a      	lsls	r2, r3, #20
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	430a      	orrs	r2, r1
 80010c0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	689a      	ldr	r2, [r3, #8]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80010d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	6899      	ldr	r1, [r3, #8]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80010de:	025a      	lsls	r2, r3, #9
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	430a      	orrs	r2, r1
 80010e6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	689a      	ldr	r2, [r3, #8]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80010f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	6899      	ldr	r1, [r3, #8]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	695b      	ldr	r3, [r3, #20]
 8001102:	029a      	lsls	r2, r3, #10
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	430a      	orrs	r2, r1
 800110a:	609a      	str	r2, [r3, #8]
}
 800110c:	bf00      	nop
 800110e:	3714      	adds	r7, #20
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr
 8001118:	40012300 	.word	0x40012300
 800111c:	0f000001 	.word	0x0f000001

08001120 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800112c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001132:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001136:	2b00      	cmp	r3, #0
 8001138:	d13c      	bne.n	80011b4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	689b      	ldr	r3, [r3, #8]
 800114c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001150:	2b00      	cmp	r3, #0
 8001152:	d12b      	bne.n	80011ac <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001158:	2b00      	cmp	r3, #0
 800115a:	d127      	bne.n	80011ac <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001162:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001166:	2b00      	cmp	r3, #0
 8001168:	d006      	beq.n	8001178 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	689b      	ldr	r3, [r3, #8]
 8001170:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001174:	2b00      	cmp	r3, #0
 8001176:	d119      	bne.n	80011ac <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	685a      	ldr	r2, [r3, #4]
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f022 0220 	bic.w	r2, r2, #32
 8001186:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001198:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800119c:	2b00      	cmp	r3, #0
 800119e:	d105      	bne.n	80011ac <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a4:	f043 0201 	orr.w	r2, r3, #1
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80011ac:	68f8      	ldr	r0, [r7, #12]
 80011ae:	f7ff fabb 	bl	8000728 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80011b2:	e00e      	b.n	80011d2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b8:	f003 0310 	and.w	r3, r3, #16
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d003      	beq.n	80011c8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80011c0:	68f8      	ldr	r0, [r7, #12]
 80011c2:	f7ff fd85 	bl	8000cd0 <HAL_ADC_ErrorCallback>
}
 80011c6:	e004      	b.n	80011d2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ce:	6878      	ldr	r0, [r7, #4]
 80011d0:	4798      	blx	r3
}
 80011d2:	bf00      	nop
 80011d4:	3710      	adds	r7, #16
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}

080011da <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80011da:	b580      	push	{r7, lr}
 80011dc:	b084      	sub	sp, #16
 80011de:	af00      	add	r7, sp, #0
 80011e0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011e6:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80011e8:	68f8      	ldr	r0, [r7, #12]
 80011ea:	f7ff fa8d 	bl	8000708 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80011ee:	bf00      	nop
 80011f0:	3710      	adds	r7, #16
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}

080011f6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80011f6:	b580      	push	{r7, lr}
 80011f8:	b084      	sub	sp, #16
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001202:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	2240      	movs	r2, #64	; 0x40
 8001208:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800120e:	f043 0204 	orr.w	r2, r3, #4
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001216:	68f8      	ldr	r0, [r7, #12]
 8001218:	f7ff fd5a 	bl	8000cd0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800121c:	bf00      	nop
 800121e:	3710      	adds	r7, #16
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}

08001224 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001224:	b480      	push	{r7}
 8001226:	b085      	sub	sp, #20
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	f003 0307 	and.w	r3, r3, #7
 8001232:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001234:	4b0c      	ldr	r3, [pc, #48]	; (8001268 <__NVIC_SetPriorityGrouping+0x44>)
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800123a:	68ba      	ldr	r2, [r7, #8]
 800123c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001240:	4013      	ands	r3, r2
 8001242:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800124c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001250:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001254:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001256:	4a04      	ldr	r2, [pc, #16]	; (8001268 <__NVIC_SetPriorityGrouping+0x44>)
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	60d3      	str	r3, [r2, #12]
}
 800125c:	bf00      	nop
 800125e:	3714      	adds	r7, #20
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr
 8001268:	e000ed00 	.word	0xe000ed00

0800126c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001270:	4b04      	ldr	r3, [pc, #16]	; (8001284 <__NVIC_GetPriorityGrouping+0x18>)
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	0a1b      	lsrs	r3, r3, #8
 8001276:	f003 0307 	and.w	r3, r3, #7
}
 800127a:	4618      	mov	r0, r3
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr
 8001284:	e000ed00 	.word	0xe000ed00

08001288 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	4603      	mov	r3, r0
 8001290:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001296:	2b00      	cmp	r3, #0
 8001298:	db0b      	blt.n	80012b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800129a:	79fb      	ldrb	r3, [r7, #7]
 800129c:	f003 021f 	and.w	r2, r3, #31
 80012a0:	4907      	ldr	r1, [pc, #28]	; (80012c0 <__NVIC_EnableIRQ+0x38>)
 80012a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a6:	095b      	lsrs	r3, r3, #5
 80012a8:	2001      	movs	r0, #1
 80012aa:	fa00 f202 	lsl.w	r2, r0, r2
 80012ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80012b2:	bf00      	nop
 80012b4:	370c      	adds	r7, #12
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	e000e100 	.word	0xe000e100

080012c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	4603      	mov	r3, r0
 80012cc:	6039      	str	r1, [r7, #0]
 80012ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	db0a      	blt.n	80012ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	b2da      	uxtb	r2, r3
 80012dc:	490c      	ldr	r1, [pc, #48]	; (8001310 <__NVIC_SetPriority+0x4c>)
 80012de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e2:	0112      	lsls	r2, r2, #4
 80012e4:	b2d2      	uxtb	r2, r2
 80012e6:	440b      	add	r3, r1
 80012e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012ec:	e00a      	b.n	8001304 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	b2da      	uxtb	r2, r3
 80012f2:	4908      	ldr	r1, [pc, #32]	; (8001314 <__NVIC_SetPriority+0x50>)
 80012f4:	79fb      	ldrb	r3, [r7, #7]
 80012f6:	f003 030f 	and.w	r3, r3, #15
 80012fa:	3b04      	subs	r3, #4
 80012fc:	0112      	lsls	r2, r2, #4
 80012fe:	b2d2      	uxtb	r2, r2
 8001300:	440b      	add	r3, r1
 8001302:	761a      	strb	r2, [r3, #24]
}
 8001304:	bf00      	nop
 8001306:	370c      	adds	r7, #12
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr
 8001310:	e000e100 	.word	0xe000e100
 8001314:	e000ed00 	.word	0xe000ed00

08001318 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001318:	b480      	push	{r7}
 800131a:	b089      	sub	sp, #36	; 0x24
 800131c:	af00      	add	r7, sp, #0
 800131e:	60f8      	str	r0, [r7, #12]
 8001320:	60b9      	str	r1, [r7, #8]
 8001322:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	f003 0307 	and.w	r3, r3, #7
 800132a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800132c:	69fb      	ldr	r3, [r7, #28]
 800132e:	f1c3 0307 	rsb	r3, r3, #7
 8001332:	2b04      	cmp	r3, #4
 8001334:	bf28      	it	cs
 8001336:	2304      	movcs	r3, #4
 8001338:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	3304      	adds	r3, #4
 800133e:	2b06      	cmp	r3, #6
 8001340:	d902      	bls.n	8001348 <NVIC_EncodePriority+0x30>
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	3b03      	subs	r3, #3
 8001346:	e000      	b.n	800134a <NVIC_EncodePriority+0x32>
 8001348:	2300      	movs	r3, #0
 800134a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800134c:	f04f 32ff 	mov.w	r2, #4294967295
 8001350:	69bb      	ldr	r3, [r7, #24]
 8001352:	fa02 f303 	lsl.w	r3, r2, r3
 8001356:	43da      	mvns	r2, r3
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	401a      	ands	r2, r3
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001360:	f04f 31ff 	mov.w	r1, #4294967295
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	fa01 f303 	lsl.w	r3, r1, r3
 800136a:	43d9      	mvns	r1, r3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001370:	4313      	orrs	r3, r2
         );
}
 8001372:	4618      	mov	r0, r3
 8001374:	3724      	adds	r7, #36	; 0x24
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
	...

08001380 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	3b01      	subs	r3, #1
 800138c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001390:	d301      	bcc.n	8001396 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001392:	2301      	movs	r3, #1
 8001394:	e00f      	b.n	80013b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001396:	4a0a      	ldr	r2, [pc, #40]	; (80013c0 <SysTick_Config+0x40>)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	3b01      	subs	r3, #1
 800139c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800139e:	210f      	movs	r1, #15
 80013a0:	f04f 30ff 	mov.w	r0, #4294967295
 80013a4:	f7ff ff8e 	bl	80012c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013a8:	4b05      	ldr	r3, [pc, #20]	; (80013c0 <SysTick_Config+0x40>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013ae:	4b04      	ldr	r3, [pc, #16]	; (80013c0 <SysTick_Config+0x40>)
 80013b0:	2207      	movs	r2, #7
 80013b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013b4:	2300      	movs	r3, #0
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3708      	adds	r7, #8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	e000e010 	.word	0xe000e010

080013c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013cc:	6878      	ldr	r0, [r7, #4]
 80013ce:	f7ff ff29 	bl	8001224 <__NVIC_SetPriorityGrouping>
}
 80013d2:	bf00      	nop
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}

080013da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013da:	b580      	push	{r7, lr}
 80013dc:	b086      	sub	sp, #24
 80013de:	af00      	add	r7, sp, #0
 80013e0:	4603      	mov	r3, r0
 80013e2:	60b9      	str	r1, [r7, #8]
 80013e4:	607a      	str	r2, [r7, #4]
 80013e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013e8:	2300      	movs	r3, #0
 80013ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013ec:	f7ff ff3e 	bl	800126c <__NVIC_GetPriorityGrouping>
 80013f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013f2:	687a      	ldr	r2, [r7, #4]
 80013f4:	68b9      	ldr	r1, [r7, #8]
 80013f6:	6978      	ldr	r0, [r7, #20]
 80013f8:	f7ff ff8e 	bl	8001318 <NVIC_EncodePriority>
 80013fc:	4602      	mov	r2, r0
 80013fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001402:	4611      	mov	r1, r2
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff ff5d 	bl	80012c4 <__NVIC_SetPriority>
}
 800140a:	bf00      	nop
 800140c:	3718      	adds	r7, #24
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}

08001412 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001412:	b580      	push	{r7, lr}
 8001414:	b082      	sub	sp, #8
 8001416:	af00      	add	r7, sp, #0
 8001418:	4603      	mov	r3, r0
 800141a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800141c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001420:	4618      	mov	r0, r3
 8001422:	f7ff ff31 	bl	8001288 <__NVIC_EnableIRQ>
}
 8001426:	bf00      	nop
 8001428:	3708      	adds	r7, #8
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}

0800142e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800142e:	b580      	push	{r7, lr}
 8001430:	b082      	sub	sp, #8
 8001432:	af00      	add	r7, sp, #0
 8001434:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	f7ff ffa2 	bl	8001380 <SysTick_Config>
 800143c:	4603      	mov	r3, r0
}
 800143e:	4618      	mov	r0, r3
 8001440:	3708      	adds	r7, #8
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
	...

08001448 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b086      	sub	sp, #24
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001450:	2300      	movs	r3, #0
 8001452:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001454:	f7ff fafc 	bl	8000a50 <HAL_GetTick>
 8001458:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d101      	bne.n	8001464 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001460:	2301      	movs	r3, #1
 8001462:	e099      	b.n	8001598 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2202      	movs	r2, #2
 8001468:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2200      	movs	r2, #0
 8001470:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f022 0201 	bic.w	r2, r2, #1
 8001482:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001484:	e00f      	b.n	80014a6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001486:	f7ff fae3 	bl	8000a50 <HAL_GetTick>
 800148a:	4602      	mov	r2, r0
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	1ad3      	subs	r3, r2, r3
 8001490:	2b05      	cmp	r3, #5
 8001492:	d908      	bls.n	80014a6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2220      	movs	r2, #32
 8001498:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2203      	movs	r2, #3
 800149e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80014a2:	2303      	movs	r3, #3
 80014a4:	e078      	b.n	8001598 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f003 0301 	and.w	r3, r3, #1
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d1e8      	bne.n	8001486 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80014bc:	697a      	ldr	r2, [r7, #20]
 80014be:	4b38      	ldr	r3, [pc, #224]	; (80015a0 <HAL_DMA_Init+0x158>)
 80014c0:	4013      	ands	r3, r2
 80014c2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	685a      	ldr	r2, [r3, #4]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	691b      	ldr	r3, [r3, #16]
 80014d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	699b      	ldr	r3, [r3, #24]
 80014e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6a1b      	ldr	r3, [r3, #32]
 80014f0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014f2:	697a      	ldr	r2, [r7, #20]
 80014f4:	4313      	orrs	r3, r2
 80014f6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014fc:	2b04      	cmp	r3, #4
 80014fe:	d107      	bne.n	8001510 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001508:	4313      	orrs	r3, r2
 800150a:	697a      	ldr	r2, [r7, #20]
 800150c:	4313      	orrs	r3, r2
 800150e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	697a      	ldr	r2, [r7, #20]
 8001516:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	695b      	ldr	r3, [r3, #20]
 800151e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	f023 0307 	bic.w	r3, r3, #7
 8001526:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800152c:	697a      	ldr	r2, [r7, #20]
 800152e:	4313      	orrs	r3, r2
 8001530:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001536:	2b04      	cmp	r3, #4
 8001538:	d117      	bne.n	800156a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800153e:	697a      	ldr	r2, [r7, #20]
 8001540:	4313      	orrs	r3, r2
 8001542:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001548:	2b00      	cmp	r3, #0
 800154a:	d00e      	beq.n	800156a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800154c:	6878      	ldr	r0, [r7, #4]
 800154e:	f000 fa6f 	bl	8001a30 <DMA_CheckFifoParam>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d008      	beq.n	800156a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2240      	movs	r2, #64	; 0x40
 800155c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2201      	movs	r2, #1
 8001562:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001566:	2301      	movs	r3, #1
 8001568:	e016      	b.n	8001598 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	697a      	ldr	r2, [r7, #20]
 8001570:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001572:	6878      	ldr	r0, [r7, #4]
 8001574:	f000 fa26 	bl	80019c4 <DMA_CalcBaseAndBitshift>
 8001578:	4603      	mov	r3, r0
 800157a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001580:	223f      	movs	r2, #63	; 0x3f
 8001582:	409a      	lsls	r2, r3
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2200      	movs	r2, #0
 800158c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2201      	movs	r2, #1
 8001592:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001596:	2300      	movs	r3, #0
}
 8001598:	4618      	mov	r0, r3
 800159a:	3718      	adds	r7, #24
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	f010803f 	.word	0xf010803f

080015a4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b086      	sub	sp, #24
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	60f8      	str	r0, [r7, #12]
 80015ac:	60b9      	str	r1, [r7, #8]
 80015ae:	607a      	str	r2, [r7, #4]
 80015b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80015b2:	2300      	movs	r3, #0
 80015b4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ba:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d101      	bne.n	80015ca <HAL_DMA_Start_IT+0x26>
 80015c6:	2302      	movs	r3, #2
 80015c8:	e040      	b.n	800164c <HAL_DMA_Start_IT+0xa8>
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	2201      	movs	r2, #1
 80015ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	2b01      	cmp	r3, #1
 80015dc:	d12f      	bne.n	800163e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	2202      	movs	r2, #2
 80015e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	2200      	movs	r2, #0
 80015ea:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	687a      	ldr	r2, [r7, #4]
 80015f0:	68b9      	ldr	r1, [r7, #8]
 80015f2:	68f8      	ldr	r0, [r7, #12]
 80015f4:	f000 f9b8 	bl	8001968 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015fc:	223f      	movs	r2, #63	; 0x3f
 80015fe:	409a      	lsls	r2, r3
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f042 0216 	orr.w	r2, r2, #22
 8001612:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001618:	2b00      	cmp	r3, #0
 800161a:	d007      	beq.n	800162c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f042 0208 	orr.w	r2, r2, #8
 800162a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f042 0201 	orr.w	r2, r2, #1
 800163a:	601a      	str	r2, [r3, #0]
 800163c:	e005      	b.n	800164a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	2200      	movs	r2, #0
 8001642:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001646:	2302      	movs	r3, #2
 8001648:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800164a:	7dfb      	ldrb	r3, [r7, #23]
}
 800164c:	4618      	mov	r0, r3
 800164e:	3718      	adds	r7, #24
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}

08001654 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b086      	sub	sp, #24
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800165c:	2300      	movs	r3, #0
 800165e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001660:	4b8e      	ldr	r3, [pc, #568]	; (800189c <HAL_DMA_IRQHandler+0x248>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a8e      	ldr	r2, [pc, #568]	; (80018a0 <HAL_DMA_IRQHandler+0x24c>)
 8001666:	fba2 2303 	umull	r2, r3, r2, r3
 800166a:	0a9b      	lsrs	r3, r3, #10
 800166c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001672:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800167e:	2208      	movs	r2, #8
 8001680:	409a      	lsls	r2, r3
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	4013      	ands	r3, r2
 8001686:	2b00      	cmp	r3, #0
 8001688:	d01a      	beq.n	80016c0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f003 0304 	and.w	r3, r3, #4
 8001694:	2b00      	cmp	r3, #0
 8001696:	d013      	beq.n	80016c0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f022 0204 	bic.w	r2, r2, #4
 80016a6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016ac:	2208      	movs	r2, #8
 80016ae:	409a      	lsls	r2, r3
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016b8:	f043 0201 	orr.w	r2, r3, #1
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016c4:	2201      	movs	r2, #1
 80016c6:	409a      	lsls	r2, r3
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	4013      	ands	r3, r2
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d012      	beq.n	80016f6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	695b      	ldr	r3, [r3, #20]
 80016d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d00b      	beq.n	80016f6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016e2:	2201      	movs	r2, #1
 80016e4:	409a      	lsls	r2, r3
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016ee:	f043 0202 	orr.w	r2, r3, #2
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016fa:	2204      	movs	r2, #4
 80016fc:	409a      	lsls	r2, r3
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	4013      	ands	r3, r2
 8001702:	2b00      	cmp	r3, #0
 8001704:	d012      	beq.n	800172c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 0302 	and.w	r3, r3, #2
 8001710:	2b00      	cmp	r3, #0
 8001712:	d00b      	beq.n	800172c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001718:	2204      	movs	r2, #4
 800171a:	409a      	lsls	r2, r3
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001724:	f043 0204 	orr.w	r2, r3, #4
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001730:	2210      	movs	r2, #16
 8001732:	409a      	lsls	r2, r3
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	4013      	ands	r3, r2
 8001738:	2b00      	cmp	r3, #0
 800173a:	d043      	beq.n	80017c4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 0308 	and.w	r3, r3, #8
 8001746:	2b00      	cmp	r3, #0
 8001748:	d03c      	beq.n	80017c4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800174e:	2210      	movs	r2, #16
 8001750:	409a      	lsls	r2, r3
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001760:	2b00      	cmp	r3, #0
 8001762:	d018      	beq.n	8001796 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800176e:	2b00      	cmp	r3, #0
 8001770:	d108      	bne.n	8001784 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001776:	2b00      	cmp	r3, #0
 8001778:	d024      	beq.n	80017c4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	4798      	blx	r3
 8001782:	e01f      	b.n	80017c4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001788:	2b00      	cmp	r3, #0
 800178a:	d01b      	beq.n	80017c4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	4798      	blx	r3
 8001794:	e016      	b.n	80017c4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d107      	bne.n	80017b4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f022 0208 	bic.w	r2, r2, #8
 80017b2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d003      	beq.n	80017c4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c0:	6878      	ldr	r0, [r7, #4]
 80017c2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017c8:	2220      	movs	r2, #32
 80017ca:	409a      	lsls	r2, r3
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	4013      	ands	r3, r2
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	f000 808f 	beq.w	80018f4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 0310 	and.w	r3, r3, #16
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	f000 8087 	beq.w	80018f4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017ea:	2220      	movs	r2, #32
 80017ec:	409a      	lsls	r2, r3
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	2b05      	cmp	r3, #5
 80017fc:	d136      	bne.n	800186c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f022 0216 	bic.w	r2, r2, #22
 800180c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	695a      	ldr	r2, [r3, #20]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800181c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001822:	2b00      	cmp	r3, #0
 8001824:	d103      	bne.n	800182e <HAL_DMA_IRQHandler+0x1da>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800182a:	2b00      	cmp	r3, #0
 800182c:	d007      	beq.n	800183e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f022 0208 	bic.w	r2, r2, #8
 800183c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001842:	223f      	movs	r2, #63	; 0x3f
 8001844:	409a      	lsls	r2, r3
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2201      	movs	r2, #1
 800184e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2200      	movs	r2, #0
 8001856:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800185e:	2b00      	cmp	r3, #0
 8001860:	d07e      	beq.n	8001960 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001866:	6878      	ldr	r0, [r7, #4]
 8001868:	4798      	blx	r3
        }
        return;
 800186a:	e079      	b.n	8001960 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001876:	2b00      	cmp	r3, #0
 8001878:	d01d      	beq.n	80018b6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001884:	2b00      	cmp	r3, #0
 8001886:	d10d      	bne.n	80018a4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800188c:	2b00      	cmp	r3, #0
 800188e:	d031      	beq.n	80018f4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001894:	6878      	ldr	r0, [r7, #4]
 8001896:	4798      	blx	r3
 8001898:	e02c      	b.n	80018f4 <HAL_DMA_IRQHandler+0x2a0>
 800189a:	bf00      	nop
 800189c:	20000000 	.word	0x20000000
 80018a0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d023      	beq.n	80018f4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	4798      	blx	r3
 80018b4:	e01e      	b.n	80018f4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d10f      	bne.n	80018e4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f022 0210 	bic.w	r2, r2, #16
 80018d2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2201      	movs	r2, #1
 80018d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2200      	movs	r2, #0
 80018e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d003      	beq.n	80018f4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018f0:	6878      	ldr	r0, [r7, #4]
 80018f2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d032      	beq.n	8001962 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001900:	f003 0301 	and.w	r3, r3, #1
 8001904:	2b00      	cmp	r3, #0
 8001906:	d022      	beq.n	800194e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2205      	movs	r2, #5
 800190c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f022 0201 	bic.w	r2, r2, #1
 800191e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	3301      	adds	r3, #1
 8001924:	60bb      	str	r3, [r7, #8]
 8001926:	697a      	ldr	r2, [r7, #20]
 8001928:	429a      	cmp	r2, r3
 800192a:	d307      	bcc.n	800193c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f003 0301 	and.w	r3, r3, #1
 8001936:	2b00      	cmp	r3, #0
 8001938:	d1f2      	bne.n	8001920 <HAL_DMA_IRQHandler+0x2cc>
 800193a:	e000      	b.n	800193e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800193c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2201      	movs	r2, #1
 8001942:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2200      	movs	r2, #0
 800194a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001952:	2b00      	cmp	r3, #0
 8001954:	d005      	beq.n	8001962 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	4798      	blx	r3
 800195e:	e000      	b.n	8001962 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001960:	bf00      	nop
    }
  }
}
 8001962:	3718      	adds	r7, #24
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}

08001968 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001968:	b480      	push	{r7}
 800196a:	b085      	sub	sp, #20
 800196c:	af00      	add	r7, sp, #0
 800196e:	60f8      	str	r0, [r7, #12]
 8001970:	60b9      	str	r1, [r7, #8]
 8001972:	607a      	str	r2, [r7, #4]
 8001974:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001984:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	683a      	ldr	r2, [r7, #0]
 800198c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	2b40      	cmp	r3, #64	; 0x40
 8001994:	d108      	bne.n	80019a8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	687a      	ldr	r2, [r7, #4]
 800199c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	68ba      	ldr	r2, [r7, #8]
 80019a4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80019a6:	e007      	b.n	80019b8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	68ba      	ldr	r2, [r7, #8]
 80019ae:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	687a      	ldr	r2, [r7, #4]
 80019b6:	60da      	str	r2, [r3, #12]
}
 80019b8:	bf00      	nop
 80019ba:	3714      	adds	r7, #20
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr

080019c4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b085      	sub	sp, #20
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	3b10      	subs	r3, #16
 80019d4:	4a14      	ldr	r2, [pc, #80]	; (8001a28 <DMA_CalcBaseAndBitshift+0x64>)
 80019d6:	fba2 2303 	umull	r2, r3, r2, r3
 80019da:	091b      	lsrs	r3, r3, #4
 80019dc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80019de:	4a13      	ldr	r2, [pc, #76]	; (8001a2c <DMA_CalcBaseAndBitshift+0x68>)
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	4413      	add	r3, r2
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	461a      	mov	r2, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	2b03      	cmp	r3, #3
 80019f0:	d909      	bls.n	8001a06 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80019fa:	f023 0303 	bic.w	r3, r3, #3
 80019fe:	1d1a      	adds	r2, r3, #4
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	659a      	str	r2, [r3, #88]	; 0x58
 8001a04:	e007      	b.n	8001a16 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001a0e:	f023 0303 	bic.w	r3, r3, #3
 8001a12:	687a      	ldr	r2, [r7, #4]
 8001a14:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3714      	adds	r7, #20
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop
 8001a28:	aaaaaaab 	.word	0xaaaaaaab
 8001a2c:	0800272c 	.word	0x0800272c

08001a30 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b085      	sub	sp, #20
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a40:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	699b      	ldr	r3, [r3, #24]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d11f      	bne.n	8001a8a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	2b03      	cmp	r3, #3
 8001a4e:	d856      	bhi.n	8001afe <DMA_CheckFifoParam+0xce>
 8001a50:	a201      	add	r2, pc, #4	; (adr r2, 8001a58 <DMA_CheckFifoParam+0x28>)
 8001a52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a56:	bf00      	nop
 8001a58:	08001a69 	.word	0x08001a69
 8001a5c:	08001a7b 	.word	0x08001a7b
 8001a60:	08001a69 	.word	0x08001a69
 8001a64:	08001aff 	.word	0x08001aff
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d046      	beq.n	8001b02 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a78:	e043      	b.n	8001b02 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a7e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001a82:	d140      	bne.n	8001b06 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a88:	e03d      	b.n	8001b06 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	699b      	ldr	r3, [r3, #24]
 8001a8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a92:	d121      	bne.n	8001ad8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	2b03      	cmp	r3, #3
 8001a98:	d837      	bhi.n	8001b0a <DMA_CheckFifoParam+0xda>
 8001a9a:	a201      	add	r2, pc, #4	; (adr r2, 8001aa0 <DMA_CheckFifoParam+0x70>)
 8001a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001aa0:	08001ab1 	.word	0x08001ab1
 8001aa4:	08001ab7 	.word	0x08001ab7
 8001aa8:	08001ab1 	.word	0x08001ab1
 8001aac:	08001ac9 	.word	0x08001ac9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	73fb      	strb	r3, [r7, #15]
      break;
 8001ab4:	e030      	b.n	8001b18 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d025      	beq.n	8001b0e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ac6:	e022      	b.n	8001b0e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001acc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001ad0:	d11f      	bne.n	8001b12 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001ad6:	e01c      	b.n	8001b12 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	2b02      	cmp	r3, #2
 8001adc:	d903      	bls.n	8001ae6 <DMA_CheckFifoParam+0xb6>
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	2b03      	cmp	r3, #3
 8001ae2:	d003      	beq.n	8001aec <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001ae4:	e018      	b.n	8001b18 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	73fb      	strb	r3, [r7, #15]
      break;
 8001aea:	e015      	b.n	8001b18 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001af0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d00e      	beq.n	8001b16 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	73fb      	strb	r3, [r7, #15]
      break;
 8001afc:	e00b      	b.n	8001b16 <DMA_CheckFifoParam+0xe6>
      break;
 8001afe:	bf00      	nop
 8001b00:	e00a      	b.n	8001b18 <DMA_CheckFifoParam+0xe8>
      break;
 8001b02:	bf00      	nop
 8001b04:	e008      	b.n	8001b18 <DMA_CheckFifoParam+0xe8>
      break;
 8001b06:	bf00      	nop
 8001b08:	e006      	b.n	8001b18 <DMA_CheckFifoParam+0xe8>
      break;
 8001b0a:	bf00      	nop
 8001b0c:	e004      	b.n	8001b18 <DMA_CheckFifoParam+0xe8>
      break;
 8001b0e:	bf00      	nop
 8001b10:	e002      	b.n	8001b18 <DMA_CheckFifoParam+0xe8>
      break;   
 8001b12:	bf00      	nop
 8001b14:	e000      	b.n	8001b18 <DMA_CheckFifoParam+0xe8>
      break;
 8001b16:	bf00      	nop
    }
  } 
  
  return status; 
 8001b18:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3714      	adds	r7, #20
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop

08001b28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b089      	sub	sp, #36	; 0x24
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b32:	2300      	movs	r3, #0
 8001b34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b36:	2300      	movs	r3, #0
 8001b38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b3e:	2300      	movs	r3, #0
 8001b40:	61fb      	str	r3, [r7, #28]
 8001b42:	e159      	b.n	8001df8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b44:	2201      	movs	r2, #1
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	697a      	ldr	r2, [r7, #20]
 8001b54:	4013      	ands	r3, r2
 8001b56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b58:	693a      	ldr	r2, [r7, #16]
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	f040 8148 	bne.w	8001df2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	f003 0303 	and.w	r3, r3, #3
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d005      	beq.n	8001b7a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d130      	bne.n	8001bdc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	005b      	lsls	r3, r3, #1
 8001b84:	2203      	movs	r2, #3
 8001b86:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8a:	43db      	mvns	r3, r3
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	4013      	ands	r3, r2
 8001b90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	68da      	ldr	r2, [r3, #12]
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	005b      	lsls	r3, r3, #1
 8001b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9e:	69ba      	ldr	r2, [r7, #24]
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	69ba      	ldr	r2, [r7, #24]
 8001ba8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb8:	43db      	mvns	r3, r3
 8001bba:	69ba      	ldr	r2, [r7, #24]
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	091b      	lsrs	r3, r3, #4
 8001bc6:	f003 0201 	and.w	r2, r3, #1
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	69ba      	ldr	r2, [r7, #24]
 8001bda:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f003 0303 	and.w	r3, r3, #3
 8001be4:	2b03      	cmp	r3, #3
 8001be6:	d017      	beq.n	8001c18 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	005b      	lsls	r3, r3, #1
 8001bf2:	2203      	movs	r2, #3
 8001bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf8:	43db      	mvns	r3, r3
 8001bfa:	69ba      	ldr	r2, [r7, #24]
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	689a      	ldr	r2, [r3, #8]
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	005b      	lsls	r3, r3, #1
 8001c08:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0c:	69ba      	ldr	r2, [r7, #24]
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	69ba      	ldr	r2, [r7, #24]
 8001c16:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f003 0303 	and.w	r3, r3, #3
 8001c20:	2b02      	cmp	r3, #2
 8001c22:	d123      	bne.n	8001c6c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	08da      	lsrs	r2, r3, #3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	3208      	adds	r2, #8
 8001c2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c30:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	f003 0307 	and.w	r3, r3, #7
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	220f      	movs	r2, #15
 8001c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c40:	43db      	mvns	r3, r3
 8001c42:	69ba      	ldr	r2, [r7, #24]
 8001c44:	4013      	ands	r3, r2
 8001c46:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	691a      	ldr	r2, [r3, #16]
 8001c4c:	69fb      	ldr	r3, [r7, #28]
 8001c4e:	f003 0307 	and.w	r3, r3, #7
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	fa02 f303 	lsl.w	r3, r2, r3
 8001c58:	69ba      	ldr	r2, [r7, #24]
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	08da      	lsrs	r2, r3, #3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	3208      	adds	r2, #8
 8001c66:	69b9      	ldr	r1, [r7, #24]
 8001c68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	005b      	lsls	r3, r3, #1
 8001c76:	2203      	movs	r2, #3
 8001c78:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7c:	43db      	mvns	r3, r3
 8001c7e:	69ba      	ldr	r2, [r7, #24]
 8001c80:	4013      	ands	r3, r2
 8001c82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f003 0203 	and.w	r2, r3, #3
 8001c8c:	69fb      	ldr	r3, [r7, #28]
 8001c8e:	005b      	lsls	r3, r3, #1
 8001c90:	fa02 f303 	lsl.w	r3, r2, r3
 8001c94:	69ba      	ldr	r2, [r7, #24]
 8001c96:	4313      	orrs	r3, r2
 8001c98:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	69ba      	ldr	r2, [r7, #24]
 8001c9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	f000 80a2 	beq.w	8001df2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cae:	2300      	movs	r3, #0
 8001cb0:	60fb      	str	r3, [r7, #12]
 8001cb2:	4b57      	ldr	r3, [pc, #348]	; (8001e10 <HAL_GPIO_Init+0x2e8>)
 8001cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb6:	4a56      	ldr	r2, [pc, #344]	; (8001e10 <HAL_GPIO_Init+0x2e8>)
 8001cb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cbc:	6453      	str	r3, [r2, #68]	; 0x44
 8001cbe:	4b54      	ldr	r3, [pc, #336]	; (8001e10 <HAL_GPIO_Init+0x2e8>)
 8001cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cc6:	60fb      	str	r3, [r7, #12]
 8001cc8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cca:	4a52      	ldr	r2, [pc, #328]	; (8001e14 <HAL_GPIO_Init+0x2ec>)
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	089b      	lsrs	r3, r3, #2
 8001cd0:	3302      	adds	r3, #2
 8001cd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	f003 0303 	and.w	r3, r3, #3
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	220f      	movs	r2, #15
 8001ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce6:	43db      	mvns	r3, r3
 8001ce8:	69ba      	ldr	r2, [r7, #24]
 8001cea:	4013      	ands	r3, r2
 8001cec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4a49      	ldr	r2, [pc, #292]	; (8001e18 <HAL_GPIO_Init+0x2f0>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d019      	beq.n	8001d2a <HAL_GPIO_Init+0x202>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	4a48      	ldr	r2, [pc, #288]	; (8001e1c <HAL_GPIO_Init+0x2f4>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d013      	beq.n	8001d26 <HAL_GPIO_Init+0x1fe>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	4a47      	ldr	r2, [pc, #284]	; (8001e20 <HAL_GPIO_Init+0x2f8>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d00d      	beq.n	8001d22 <HAL_GPIO_Init+0x1fa>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4a46      	ldr	r2, [pc, #280]	; (8001e24 <HAL_GPIO_Init+0x2fc>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d007      	beq.n	8001d1e <HAL_GPIO_Init+0x1f6>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4a45      	ldr	r2, [pc, #276]	; (8001e28 <HAL_GPIO_Init+0x300>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d101      	bne.n	8001d1a <HAL_GPIO_Init+0x1f2>
 8001d16:	2304      	movs	r3, #4
 8001d18:	e008      	b.n	8001d2c <HAL_GPIO_Init+0x204>
 8001d1a:	2307      	movs	r3, #7
 8001d1c:	e006      	b.n	8001d2c <HAL_GPIO_Init+0x204>
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e004      	b.n	8001d2c <HAL_GPIO_Init+0x204>
 8001d22:	2302      	movs	r3, #2
 8001d24:	e002      	b.n	8001d2c <HAL_GPIO_Init+0x204>
 8001d26:	2301      	movs	r3, #1
 8001d28:	e000      	b.n	8001d2c <HAL_GPIO_Init+0x204>
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	69fa      	ldr	r2, [r7, #28]
 8001d2e:	f002 0203 	and.w	r2, r2, #3
 8001d32:	0092      	lsls	r2, r2, #2
 8001d34:	4093      	lsls	r3, r2
 8001d36:	69ba      	ldr	r2, [r7, #24]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d3c:	4935      	ldr	r1, [pc, #212]	; (8001e14 <HAL_GPIO_Init+0x2ec>)
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	089b      	lsrs	r3, r3, #2
 8001d42:	3302      	adds	r3, #2
 8001d44:	69ba      	ldr	r2, [r7, #24]
 8001d46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d4a:	4b38      	ldr	r3, [pc, #224]	; (8001e2c <HAL_GPIO_Init+0x304>)
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	43db      	mvns	r3, r3
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	4013      	ands	r3, r2
 8001d58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d003      	beq.n	8001d6e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001d66:	69ba      	ldr	r2, [r7, #24]
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d6e:	4a2f      	ldr	r2, [pc, #188]	; (8001e2c <HAL_GPIO_Init+0x304>)
 8001d70:	69bb      	ldr	r3, [r7, #24]
 8001d72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d74:	4b2d      	ldr	r3, [pc, #180]	; (8001e2c <HAL_GPIO_Init+0x304>)
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	43db      	mvns	r3, r3
 8001d7e:	69ba      	ldr	r2, [r7, #24]
 8001d80:	4013      	ands	r3, r2
 8001d82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d003      	beq.n	8001d98 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d98:	4a24      	ldr	r2, [pc, #144]	; (8001e2c <HAL_GPIO_Init+0x304>)
 8001d9a:	69bb      	ldr	r3, [r7, #24]
 8001d9c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d9e:	4b23      	ldr	r3, [pc, #140]	; (8001e2c <HAL_GPIO_Init+0x304>)
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	43db      	mvns	r3, r3
 8001da8:	69ba      	ldr	r2, [r7, #24]
 8001daa:	4013      	ands	r3, r2
 8001dac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d003      	beq.n	8001dc2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001dba:	69ba      	ldr	r2, [r7, #24]
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001dc2:	4a1a      	ldr	r2, [pc, #104]	; (8001e2c <HAL_GPIO_Init+0x304>)
 8001dc4:	69bb      	ldr	r3, [r7, #24]
 8001dc6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001dc8:	4b18      	ldr	r3, [pc, #96]	; (8001e2c <HAL_GPIO_Init+0x304>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	43db      	mvns	r3, r3
 8001dd2:	69ba      	ldr	r2, [r7, #24]
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d003      	beq.n	8001dec <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001de4:	69ba      	ldr	r2, [r7, #24]
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001dec:	4a0f      	ldr	r2, [pc, #60]	; (8001e2c <HAL_GPIO_Init+0x304>)
 8001dee:	69bb      	ldr	r3, [r7, #24]
 8001df0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	3301      	adds	r3, #1
 8001df6:	61fb      	str	r3, [r7, #28]
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	2b0f      	cmp	r3, #15
 8001dfc:	f67f aea2 	bls.w	8001b44 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e00:	bf00      	nop
 8001e02:	bf00      	nop
 8001e04:	3724      	adds	r7, #36	; 0x24
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	40023800 	.word	0x40023800
 8001e14:	40013800 	.word	0x40013800
 8001e18:	40020000 	.word	0x40020000
 8001e1c:	40020400 	.word	0x40020400
 8001e20:	40020800 	.word	0x40020800
 8001e24:	40020c00 	.word	0x40020c00
 8001e28:	40021000 	.word	0x40021000
 8001e2c:	40013c00 	.word	0x40013c00

08001e30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	460b      	mov	r3, r1
 8001e3a:	807b      	strh	r3, [r7, #2]
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e40:	787b      	ldrb	r3, [r7, #1]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d003      	beq.n	8001e4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e46:	887a      	ldrh	r2, [r7, #2]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e4c:	e003      	b.n	8001e56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e4e:	887b      	ldrh	r3, [r7, #2]
 8001e50:	041a      	lsls	r2, r3, #16
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	619a      	str	r2, [r3, #24]
}
 8001e56:	bf00      	nop
 8001e58:	370c      	adds	r7, #12
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
	...

08001e64 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b086      	sub	sp, #24
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d101      	bne.n	8001e76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e267      	b.n	8002346 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0301 	and.w	r3, r3, #1
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d075      	beq.n	8001f6e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e82:	4b88      	ldr	r3, [pc, #544]	; (80020a4 <HAL_RCC_OscConfig+0x240>)
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	f003 030c 	and.w	r3, r3, #12
 8001e8a:	2b04      	cmp	r3, #4
 8001e8c:	d00c      	beq.n	8001ea8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e8e:	4b85      	ldr	r3, [pc, #532]	; (80020a4 <HAL_RCC_OscConfig+0x240>)
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e96:	2b08      	cmp	r3, #8
 8001e98:	d112      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e9a:	4b82      	ldr	r3, [pc, #520]	; (80020a4 <HAL_RCC_OscConfig+0x240>)
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ea2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ea6:	d10b      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ea8:	4b7e      	ldr	r3, [pc, #504]	; (80020a4 <HAL_RCC_OscConfig+0x240>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d05b      	beq.n	8001f6c <HAL_RCC_OscConfig+0x108>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d157      	bne.n	8001f6c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e242      	b.n	8002346 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ec8:	d106      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x74>
 8001eca:	4b76      	ldr	r3, [pc, #472]	; (80020a4 <HAL_RCC_OscConfig+0x240>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a75      	ldr	r2, [pc, #468]	; (80020a4 <HAL_RCC_OscConfig+0x240>)
 8001ed0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ed4:	6013      	str	r3, [r2, #0]
 8001ed6:	e01d      	b.n	8001f14 <HAL_RCC_OscConfig+0xb0>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ee0:	d10c      	bne.n	8001efc <HAL_RCC_OscConfig+0x98>
 8001ee2:	4b70      	ldr	r3, [pc, #448]	; (80020a4 <HAL_RCC_OscConfig+0x240>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a6f      	ldr	r2, [pc, #444]	; (80020a4 <HAL_RCC_OscConfig+0x240>)
 8001ee8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001eec:	6013      	str	r3, [r2, #0]
 8001eee:	4b6d      	ldr	r3, [pc, #436]	; (80020a4 <HAL_RCC_OscConfig+0x240>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a6c      	ldr	r2, [pc, #432]	; (80020a4 <HAL_RCC_OscConfig+0x240>)
 8001ef4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ef8:	6013      	str	r3, [r2, #0]
 8001efa:	e00b      	b.n	8001f14 <HAL_RCC_OscConfig+0xb0>
 8001efc:	4b69      	ldr	r3, [pc, #420]	; (80020a4 <HAL_RCC_OscConfig+0x240>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a68      	ldr	r2, [pc, #416]	; (80020a4 <HAL_RCC_OscConfig+0x240>)
 8001f02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f06:	6013      	str	r3, [r2, #0]
 8001f08:	4b66      	ldr	r3, [pc, #408]	; (80020a4 <HAL_RCC_OscConfig+0x240>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a65      	ldr	r2, [pc, #404]	; (80020a4 <HAL_RCC_OscConfig+0x240>)
 8001f0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d013      	beq.n	8001f44 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f1c:	f7fe fd98 	bl	8000a50 <HAL_GetTick>
 8001f20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f22:	e008      	b.n	8001f36 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f24:	f7fe fd94 	bl	8000a50 <HAL_GetTick>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	2b64      	cmp	r3, #100	; 0x64
 8001f30:	d901      	bls.n	8001f36 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e207      	b.n	8002346 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f36:	4b5b      	ldr	r3, [pc, #364]	; (80020a4 <HAL_RCC_OscConfig+0x240>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d0f0      	beq.n	8001f24 <HAL_RCC_OscConfig+0xc0>
 8001f42:	e014      	b.n	8001f6e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f44:	f7fe fd84 	bl	8000a50 <HAL_GetTick>
 8001f48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f4a:	e008      	b.n	8001f5e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f4c:	f7fe fd80 	bl	8000a50 <HAL_GetTick>
 8001f50:	4602      	mov	r2, r0
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	2b64      	cmp	r3, #100	; 0x64
 8001f58:	d901      	bls.n	8001f5e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	e1f3      	b.n	8002346 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f5e:	4b51      	ldr	r3, [pc, #324]	; (80020a4 <HAL_RCC_OscConfig+0x240>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d1f0      	bne.n	8001f4c <HAL_RCC_OscConfig+0xe8>
 8001f6a:	e000      	b.n	8001f6e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0302 	and.w	r3, r3, #2
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d063      	beq.n	8002042 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f7a:	4b4a      	ldr	r3, [pc, #296]	; (80020a4 <HAL_RCC_OscConfig+0x240>)
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	f003 030c 	and.w	r3, r3, #12
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d00b      	beq.n	8001f9e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f86:	4b47      	ldr	r3, [pc, #284]	; (80020a4 <HAL_RCC_OscConfig+0x240>)
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f8e:	2b08      	cmp	r3, #8
 8001f90:	d11c      	bne.n	8001fcc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f92:	4b44      	ldr	r3, [pc, #272]	; (80020a4 <HAL_RCC_OscConfig+0x240>)
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d116      	bne.n	8001fcc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f9e:	4b41      	ldr	r3, [pc, #260]	; (80020a4 <HAL_RCC_OscConfig+0x240>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0302 	and.w	r3, r3, #2
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d005      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x152>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	68db      	ldr	r3, [r3, #12]
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d001      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e1c7      	b.n	8002346 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fb6:	4b3b      	ldr	r3, [pc, #236]	; (80020a4 <HAL_RCC_OscConfig+0x240>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	691b      	ldr	r3, [r3, #16]
 8001fc2:	00db      	lsls	r3, r3, #3
 8001fc4:	4937      	ldr	r1, [pc, #220]	; (80020a4 <HAL_RCC_OscConfig+0x240>)
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fca:	e03a      	b.n	8002042 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d020      	beq.n	8002016 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fd4:	4b34      	ldr	r3, [pc, #208]	; (80020a8 <HAL_RCC_OscConfig+0x244>)
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fda:	f7fe fd39 	bl	8000a50 <HAL_GetTick>
 8001fde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fe0:	e008      	b.n	8001ff4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fe2:	f7fe fd35 	bl	8000a50 <HAL_GetTick>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	2b02      	cmp	r3, #2
 8001fee:	d901      	bls.n	8001ff4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	e1a8      	b.n	8002346 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ff4:	4b2b      	ldr	r3, [pc, #172]	; (80020a4 <HAL_RCC_OscConfig+0x240>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 0302 	and.w	r3, r3, #2
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d0f0      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002000:	4b28      	ldr	r3, [pc, #160]	; (80020a4 <HAL_RCC_OscConfig+0x240>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	691b      	ldr	r3, [r3, #16]
 800200c:	00db      	lsls	r3, r3, #3
 800200e:	4925      	ldr	r1, [pc, #148]	; (80020a4 <HAL_RCC_OscConfig+0x240>)
 8002010:	4313      	orrs	r3, r2
 8002012:	600b      	str	r3, [r1, #0]
 8002014:	e015      	b.n	8002042 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002016:	4b24      	ldr	r3, [pc, #144]	; (80020a8 <HAL_RCC_OscConfig+0x244>)
 8002018:	2200      	movs	r2, #0
 800201a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800201c:	f7fe fd18 	bl	8000a50 <HAL_GetTick>
 8002020:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002022:	e008      	b.n	8002036 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002024:	f7fe fd14 	bl	8000a50 <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	2b02      	cmp	r3, #2
 8002030:	d901      	bls.n	8002036 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e187      	b.n	8002346 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002036:	4b1b      	ldr	r3, [pc, #108]	; (80020a4 <HAL_RCC_OscConfig+0x240>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0302 	and.w	r3, r3, #2
 800203e:	2b00      	cmp	r3, #0
 8002040:	d1f0      	bne.n	8002024 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0308 	and.w	r3, r3, #8
 800204a:	2b00      	cmp	r3, #0
 800204c:	d036      	beq.n	80020bc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	695b      	ldr	r3, [r3, #20]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d016      	beq.n	8002084 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002056:	4b15      	ldr	r3, [pc, #84]	; (80020ac <HAL_RCC_OscConfig+0x248>)
 8002058:	2201      	movs	r2, #1
 800205a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800205c:	f7fe fcf8 	bl	8000a50 <HAL_GetTick>
 8002060:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002062:	e008      	b.n	8002076 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002064:	f7fe fcf4 	bl	8000a50 <HAL_GetTick>
 8002068:	4602      	mov	r2, r0
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	2b02      	cmp	r3, #2
 8002070:	d901      	bls.n	8002076 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e167      	b.n	8002346 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002076:	4b0b      	ldr	r3, [pc, #44]	; (80020a4 <HAL_RCC_OscConfig+0x240>)
 8002078:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800207a:	f003 0302 	and.w	r3, r3, #2
 800207e:	2b00      	cmp	r3, #0
 8002080:	d0f0      	beq.n	8002064 <HAL_RCC_OscConfig+0x200>
 8002082:	e01b      	b.n	80020bc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002084:	4b09      	ldr	r3, [pc, #36]	; (80020ac <HAL_RCC_OscConfig+0x248>)
 8002086:	2200      	movs	r2, #0
 8002088:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800208a:	f7fe fce1 	bl	8000a50 <HAL_GetTick>
 800208e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002090:	e00e      	b.n	80020b0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002092:	f7fe fcdd 	bl	8000a50 <HAL_GetTick>
 8002096:	4602      	mov	r2, r0
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	1ad3      	subs	r3, r2, r3
 800209c:	2b02      	cmp	r3, #2
 800209e:	d907      	bls.n	80020b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80020a0:	2303      	movs	r3, #3
 80020a2:	e150      	b.n	8002346 <HAL_RCC_OscConfig+0x4e2>
 80020a4:	40023800 	.word	0x40023800
 80020a8:	42470000 	.word	0x42470000
 80020ac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020b0:	4b88      	ldr	r3, [pc, #544]	; (80022d4 <HAL_RCC_OscConfig+0x470>)
 80020b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020b4:	f003 0302 	and.w	r3, r3, #2
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d1ea      	bne.n	8002092 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 0304 	and.w	r3, r3, #4
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	f000 8097 	beq.w	80021f8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020ca:	2300      	movs	r3, #0
 80020cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020ce:	4b81      	ldr	r3, [pc, #516]	; (80022d4 <HAL_RCC_OscConfig+0x470>)
 80020d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d10f      	bne.n	80020fa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020da:	2300      	movs	r3, #0
 80020dc:	60bb      	str	r3, [r7, #8]
 80020de:	4b7d      	ldr	r3, [pc, #500]	; (80022d4 <HAL_RCC_OscConfig+0x470>)
 80020e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e2:	4a7c      	ldr	r2, [pc, #496]	; (80022d4 <HAL_RCC_OscConfig+0x470>)
 80020e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020e8:	6413      	str	r3, [r2, #64]	; 0x40
 80020ea:	4b7a      	ldr	r3, [pc, #488]	; (80022d4 <HAL_RCC_OscConfig+0x470>)
 80020ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020f2:	60bb      	str	r3, [r7, #8]
 80020f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020f6:	2301      	movs	r3, #1
 80020f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020fa:	4b77      	ldr	r3, [pc, #476]	; (80022d8 <HAL_RCC_OscConfig+0x474>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002102:	2b00      	cmp	r3, #0
 8002104:	d118      	bne.n	8002138 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002106:	4b74      	ldr	r3, [pc, #464]	; (80022d8 <HAL_RCC_OscConfig+0x474>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a73      	ldr	r2, [pc, #460]	; (80022d8 <HAL_RCC_OscConfig+0x474>)
 800210c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002110:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002112:	f7fe fc9d 	bl	8000a50 <HAL_GetTick>
 8002116:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002118:	e008      	b.n	800212c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800211a:	f7fe fc99 	bl	8000a50 <HAL_GetTick>
 800211e:	4602      	mov	r2, r0
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	1ad3      	subs	r3, r2, r3
 8002124:	2b02      	cmp	r3, #2
 8002126:	d901      	bls.n	800212c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002128:	2303      	movs	r3, #3
 800212a:	e10c      	b.n	8002346 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800212c:	4b6a      	ldr	r3, [pc, #424]	; (80022d8 <HAL_RCC_OscConfig+0x474>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002134:	2b00      	cmp	r3, #0
 8002136:	d0f0      	beq.n	800211a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	2b01      	cmp	r3, #1
 800213e:	d106      	bne.n	800214e <HAL_RCC_OscConfig+0x2ea>
 8002140:	4b64      	ldr	r3, [pc, #400]	; (80022d4 <HAL_RCC_OscConfig+0x470>)
 8002142:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002144:	4a63      	ldr	r2, [pc, #396]	; (80022d4 <HAL_RCC_OscConfig+0x470>)
 8002146:	f043 0301 	orr.w	r3, r3, #1
 800214a:	6713      	str	r3, [r2, #112]	; 0x70
 800214c:	e01c      	b.n	8002188 <HAL_RCC_OscConfig+0x324>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	2b05      	cmp	r3, #5
 8002154:	d10c      	bne.n	8002170 <HAL_RCC_OscConfig+0x30c>
 8002156:	4b5f      	ldr	r3, [pc, #380]	; (80022d4 <HAL_RCC_OscConfig+0x470>)
 8002158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800215a:	4a5e      	ldr	r2, [pc, #376]	; (80022d4 <HAL_RCC_OscConfig+0x470>)
 800215c:	f043 0304 	orr.w	r3, r3, #4
 8002160:	6713      	str	r3, [r2, #112]	; 0x70
 8002162:	4b5c      	ldr	r3, [pc, #368]	; (80022d4 <HAL_RCC_OscConfig+0x470>)
 8002164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002166:	4a5b      	ldr	r2, [pc, #364]	; (80022d4 <HAL_RCC_OscConfig+0x470>)
 8002168:	f043 0301 	orr.w	r3, r3, #1
 800216c:	6713      	str	r3, [r2, #112]	; 0x70
 800216e:	e00b      	b.n	8002188 <HAL_RCC_OscConfig+0x324>
 8002170:	4b58      	ldr	r3, [pc, #352]	; (80022d4 <HAL_RCC_OscConfig+0x470>)
 8002172:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002174:	4a57      	ldr	r2, [pc, #348]	; (80022d4 <HAL_RCC_OscConfig+0x470>)
 8002176:	f023 0301 	bic.w	r3, r3, #1
 800217a:	6713      	str	r3, [r2, #112]	; 0x70
 800217c:	4b55      	ldr	r3, [pc, #340]	; (80022d4 <HAL_RCC_OscConfig+0x470>)
 800217e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002180:	4a54      	ldr	r2, [pc, #336]	; (80022d4 <HAL_RCC_OscConfig+0x470>)
 8002182:	f023 0304 	bic.w	r3, r3, #4
 8002186:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d015      	beq.n	80021bc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002190:	f7fe fc5e 	bl	8000a50 <HAL_GetTick>
 8002194:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002196:	e00a      	b.n	80021ae <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002198:	f7fe fc5a 	bl	8000a50 <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d901      	bls.n	80021ae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e0cb      	b.n	8002346 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021ae:	4b49      	ldr	r3, [pc, #292]	; (80022d4 <HAL_RCC_OscConfig+0x470>)
 80021b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021b2:	f003 0302 	and.w	r3, r3, #2
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d0ee      	beq.n	8002198 <HAL_RCC_OscConfig+0x334>
 80021ba:	e014      	b.n	80021e6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021bc:	f7fe fc48 	bl	8000a50 <HAL_GetTick>
 80021c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021c2:	e00a      	b.n	80021da <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021c4:	f7fe fc44 	bl	8000a50 <HAL_GetTick>
 80021c8:	4602      	mov	r2, r0
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d901      	bls.n	80021da <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80021d6:	2303      	movs	r3, #3
 80021d8:	e0b5      	b.n	8002346 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021da:	4b3e      	ldr	r3, [pc, #248]	; (80022d4 <HAL_RCC_OscConfig+0x470>)
 80021dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021de:	f003 0302 	and.w	r3, r3, #2
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d1ee      	bne.n	80021c4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021e6:	7dfb      	ldrb	r3, [r7, #23]
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d105      	bne.n	80021f8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021ec:	4b39      	ldr	r3, [pc, #228]	; (80022d4 <HAL_RCC_OscConfig+0x470>)
 80021ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f0:	4a38      	ldr	r2, [pc, #224]	; (80022d4 <HAL_RCC_OscConfig+0x470>)
 80021f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021f6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	699b      	ldr	r3, [r3, #24]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	f000 80a1 	beq.w	8002344 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002202:	4b34      	ldr	r3, [pc, #208]	; (80022d4 <HAL_RCC_OscConfig+0x470>)
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	f003 030c 	and.w	r3, r3, #12
 800220a:	2b08      	cmp	r3, #8
 800220c:	d05c      	beq.n	80022c8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	699b      	ldr	r3, [r3, #24]
 8002212:	2b02      	cmp	r3, #2
 8002214:	d141      	bne.n	800229a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002216:	4b31      	ldr	r3, [pc, #196]	; (80022dc <HAL_RCC_OscConfig+0x478>)
 8002218:	2200      	movs	r2, #0
 800221a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800221c:	f7fe fc18 	bl	8000a50 <HAL_GetTick>
 8002220:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002222:	e008      	b.n	8002236 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002224:	f7fe fc14 	bl	8000a50 <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	2b02      	cmp	r3, #2
 8002230:	d901      	bls.n	8002236 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002232:	2303      	movs	r3, #3
 8002234:	e087      	b.n	8002346 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002236:	4b27      	ldr	r3, [pc, #156]	; (80022d4 <HAL_RCC_OscConfig+0x470>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d1f0      	bne.n	8002224 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	69da      	ldr	r2, [r3, #28]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6a1b      	ldr	r3, [r3, #32]
 800224a:	431a      	orrs	r2, r3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002250:	019b      	lsls	r3, r3, #6
 8002252:	431a      	orrs	r2, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002258:	085b      	lsrs	r3, r3, #1
 800225a:	3b01      	subs	r3, #1
 800225c:	041b      	lsls	r3, r3, #16
 800225e:	431a      	orrs	r2, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002264:	061b      	lsls	r3, r3, #24
 8002266:	491b      	ldr	r1, [pc, #108]	; (80022d4 <HAL_RCC_OscConfig+0x470>)
 8002268:	4313      	orrs	r3, r2
 800226a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800226c:	4b1b      	ldr	r3, [pc, #108]	; (80022dc <HAL_RCC_OscConfig+0x478>)
 800226e:	2201      	movs	r2, #1
 8002270:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002272:	f7fe fbed 	bl	8000a50 <HAL_GetTick>
 8002276:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002278:	e008      	b.n	800228c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800227a:	f7fe fbe9 	bl	8000a50 <HAL_GetTick>
 800227e:	4602      	mov	r2, r0
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	1ad3      	subs	r3, r2, r3
 8002284:	2b02      	cmp	r3, #2
 8002286:	d901      	bls.n	800228c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002288:	2303      	movs	r3, #3
 800228a:	e05c      	b.n	8002346 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800228c:	4b11      	ldr	r3, [pc, #68]	; (80022d4 <HAL_RCC_OscConfig+0x470>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002294:	2b00      	cmp	r3, #0
 8002296:	d0f0      	beq.n	800227a <HAL_RCC_OscConfig+0x416>
 8002298:	e054      	b.n	8002344 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800229a:	4b10      	ldr	r3, [pc, #64]	; (80022dc <HAL_RCC_OscConfig+0x478>)
 800229c:	2200      	movs	r2, #0
 800229e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022a0:	f7fe fbd6 	bl	8000a50 <HAL_GetTick>
 80022a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022a6:	e008      	b.n	80022ba <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022a8:	f7fe fbd2 	bl	8000a50 <HAL_GetTick>
 80022ac:	4602      	mov	r2, r0
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	d901      	bls.n	80022ba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80022b6:	2303      	movs	r3, #3
 80022b8:	e045      	b.n	8002346 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022ba:	4b06      	ldr	r3, [pc, #24]	; (80022d4 <HAL_RCC_OscConfig+0x470>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d1f0      	bne.n	80022a8 <HAL_RCC_OscConfig+0x444>
 80022c6:	e03d      	b.n	8002344 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	699b      	ldr	r3, [r3, #24]
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d107      	bne.n	80022e0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e038      	b.n	8002346 <HAL_RCC_OscConfig+0x4e2>
 80022d4:	40023800 	.word	0x40023800
 80022d8:	40007000 	.word	0x40007000
 80022dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80022e0:	4b1b      	ldr	r3, [pc, #108]	; (8002350 <HAL_RCC_OscConfig+0x4ec>)
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	699b      	ldr	r3, [r3, #24]
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d028      	beq.n	8002340 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d121      	bne.n	8002340 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002306:	429a      	cmp	r2, r3
 8002308:	d11a      	bne.n	8002340 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800230a:	68fa      	ldr	r2, [r7, #12]
 800230c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002310:	4013      	ands	r3, r2
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002316:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002318:	4293      	cmp	r3, r2
 800231a:	d111      	bne.n	8002340 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002326:	085b      	lsrs	r3, r3, #1
 8002328:	3b01      	subs	r3, #1
 800232a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800232c:	429a      	cmp	r2, r3
 800232e:	d107      	bne.n	8002340 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800233a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800233c:	429a      	cmp	r2, r3
 800233e:	d001      	beq.n	8002344 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e000      	b.n	8002346 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002344:	2300      	movs	r3, #0
}
 8002346:	4618      	mov	r0, r3
 8002348:	3718      	adds	r7, #24
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	40023800 	.word	0x40023800

08002354 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b084      	sub	sp, #16
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d101      	bne.n	8002368 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e0cc      	b.n	8002502 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002368:	4b68      	ldr	r3, [pc, #416]	; (800250c <HAL_RCC_ClockConfig+0x1b8>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0307 	and.w	r3, r3, #7
 8002370:	683a      	ldr	r2, [r7, #0]
 8002372:	429a      	cmp	r2, r3
 8002374:	d90c      	bls.n	8002390 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002376:	4b65      	ldr	r3, [pc, #404]	; (800250c <HAL_RCC_ClockConfig+0x1b8>)
 8002378:	683a      	ldr	r2, [r7, #0]
 800237a:	b2d2      	uxtb	r2, r2
 800237c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800237e:	4b63      	ldr	r3, [pc, #396]	; (800250c <HAL_RCC_ClockConfig+0x1b8>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0307 	and.w	r3, r3, #7
 8002386:	683a      	ldr	r2, [r7, #0]
 8002388:	429a      	cmp	r2, r3
 800238a:	d001      	beq.n	8002390 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	e0b8      	b.n	8002502 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0302 	and.w	r3, r3, #2
 8002398:	2b00      	cmp	r3, #0
 800239a:	d020      	beq.n	80023de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0304 	and.w	r3, r3, #4
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d005      	beq.n	80023b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023a8:	4b59      	ldr	r3, [pc, #356]	; (8002510 <HAL_RCC_ClockConfig+0x1bc>)
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	4a58      	ldr	r2, [pc, #352]	; (8002510 <HAL_RCC_ClockConfig+0x1bc>)
 80023ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80023b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 0308 	and.w	r3, r3, #8
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d005      	beq.n	80023cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023c0:	4b53      	ldr	r3, [pc, #332]	; (8002510 <HAL_RCC_ClockConfig+0x1bc>)
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	4a52      	ldr	r2, [pc, #328]	; (8002510 <HAL_RCC_ClockConfig+0x1bc>)
 80023c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80023ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023cc:	4b50      	ldr	r3, [pc, #320]	; (8002510 <HAL_RCC_ClockConfig+0x1bc>)
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	494d      	ldr	r1, [pc, #308]	; (8002510 <HAL_RCC_ClockConfig+0x1bc>)
 80023da:	4313      	orrs	r3, r2
 80023dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0301 	and.w	r3, r3, #1
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d044      	beq.n	8002474 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d107      	bne.n	8002402 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023f2:	4b47      	ldr	r3, [pc, #284]	; (8002510 <HAL_RCC_ClockConfig+0x1bc>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d119      	bne.n	8002432 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e07f      	b.n	8002502 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	2b02      	cmp	r3, #2
 8002408:	d003      	beq.n	8002412 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800240e:	2b03      	cmp	r3, #3
 8002410:	d107      	bne.n	8002422 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002412:	4b3f      	ldr	r3, [pc, #252]	; (8002510 <HAL_RCC_ClockConfig+0x1bc>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d109      	bne.n	8002432 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e06f      	b.n	8002502 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002422:	4b3b      	ldr	r3, [pc, #236]	; (8002510 <HAL_RCC_ClockConfig+0x1bc>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0302 	and.w	r3, r3, #2
 800242a:	2b00      	cmp	r3, #0
 800242c:	d101      	bne.n	8002432 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e067      	b.n	8002502 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002432:	4b37      	ldr	r3, [pc, #220]	; (8002510 <HAL_RCC_ClockConfig+0x1bc>)
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	f023 0203 	bic.w	r2, r3, #3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	4934      	ldr	r1, [pc, #208]	; (8002510 <HAL_RCC_ClockConfig+0x1bc>)
 8002440:	4313      	orrs	r3, r2
 8002442:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002444:	f7fe fb04 	bl	8000a50 <HAL_GetTick>
 8002448:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800244a:	e00a      	b.n	8002462 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800244c:	f7fe fb00 	bl	8000a50 <HAL_GetTick>
 8002450:	4602      	mov	r2, r0
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	f241 3288 	movw	r2, #5000	; 0x1388
 800245a:	4293      	cmp	r3, r2
 800245c:	d901      	bls.n	8002462 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	e04f      	b.n	8002502 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002462:	4b2b      	ldr	r3, [pc, #172]	; (8002510 <HAL_RCC_ClockConfig+0x1bc>)
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	f003 020c 	and.w	r2, r3, #12
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	429a      	cmp	r2, r3
 8002472:	d1eb      	bne.n	800244c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002474:	4b25      	ldr	r3, [pc, #148]	; (800250c <HAL_RCC_ClockConfig+0x1b8>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 0307 	and.w	r3, r3, #7
 800247c:	683a      	ldr	r2, [r7, #0]
 800247e:	429a      	cmp	r2, r3
 8002480:	d20c      	bcs.n	800249c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002482:	4b22      	ldr	r3, [pc, #136]	; (800250c <HAL_RCC_ClockConfig+0x1b8>)
 8002484:	683a      	ldr	r2, [r7, #0]
 8002486:	b2d2      	uxtb	r2, r2
 8002488:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800248a:	4b20      	ldr	r3, [pc, #128]	; (800250c <HAL_RCC_ClockConfig+0x1b8>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0307 	and.w	r3, r3, #7
 8002492:	683a      	ldr	r2, [r7, #0]
 8002494:	429a      	cmp	r2, r3
 8002496:	d001      	beq.n	800249c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e032      	b.n	8002502 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0304 	and.w	r3, r3, #4
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d008      	beq.n	80024ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024a8:	4b19      	ldr	r3, [pc, #100]	; (8002510 <HAL_RCC_ClockConfig+0x1bc>)
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	4916      	ldr	r1, [pc, #88]	; (8002510 <HAL_RCC_ClockConfig+0x1bc>)
 80024b6:	4313      	orrs	r3, r2
 80024b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0308 	and.w	r3, r3, #8
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d009      	beq.n	80024da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024c6:	4b12      	ldr	r3, [pc, #72]	; (8002510 <HAL_RCC_ClockConfig+0x1bc>)
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	691b      	ldr	r3, [r3, #16]
 80024d2:	00db      	lsls	r3, r3, #3
 80024d4:	490e      	ldr	r1, [pc, #56]	; (8002510 <HAL_RCC_ClockConfig+0x1bc>)
 80024d6:	4313      	orrs	r3, r2
 80024d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80024da:	f000 f821 	bl	8002520 <HAL_RCC_GetSysClockFreq>
 80024de:	4602      	mov	r2, r0
 80024e0:	4b0b      	ldr	r3, [pc, #44]	; (8002510 <HAL_RCC_ClockConfig+0x1bc>)
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	091b      	lsrs	r3, r3, #4
 80024e6:	f003 030f 	and.w	r3, r3, #15
 80024ea:	490a      	ldr	r1, [pc, #40]	; (8002514 <HAL_RCC_ClockConfig+0x1c0>)
 80024ec:	5ccb      	ldrb	r3, [r1, r3]
 80024ee:	fa22 f303 	lsr.w	r3, r2, r3
 80024f2:	4a09      	ldr	r2, [pc, #36]	; (8002518 <HAL_RCC_ClockConfig+0x1c4>)
 80024f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80024f6:	4b09      	ldr	r3, [pc, #36]	; (800251c <HAL_RCC_ClockConfig+0x1c8>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4618      	mov	r0, r3
 80024fc:	f7fe fa64 	bl	80009c8 <HAL_InitTick>

  return HAL_OK;
 8002500:	2300      	movs	r3, #0
}
 8002502:	4618      	mov	r0, r3
 8002504:	3710      	adds	r7, #16
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	40023c00 	.word	0x40023c00
 8002510:	40023800 	.word	0x40023800
 8002514:	0800271c 	.word	0x0800271c
 8002518:	20000000 	.word	0x20000000
 800251c:	20000004 	.word	0x20000004

08002520 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002520:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002524:	b090      	sub	sp, #64	; 0x40
 8002526:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002528:	2300      	movs	r3, #0
 800252a:	637b      	str	r3, [r7, #52]	; 0x34
 800252c:	2300      	movs	r3, #0
 800252e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002530:	2300      	movs	r3, #0
 8002532:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002534:	2300      	movs	r3, #0
 8002536:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002538:	4b59      	ldr	r3, [pc, #356]	; (80026a0 <HAL_RCC_GetSysClockFreq+0x180>)
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	f003 030c 	and.w	r3, r3, #12
 8002540:	2b08      	cmp	r3, #8
 8002542:	d00d      	beq.n	8002560 <HAL_RCC_GetSysClockFreq+0x40>
 8002544:	2b08      	cmp	r3, #8
 8002546:	f200 80a1 	bhi.w	800268c <HAL_RCC_GetSysClockFreq+0x16c>
 800254a:	2b00      	cmp	r3, #0
 800254c:	d002      	beq.n	8002554 <HAL_RCC_GetSysClockFreq+0x34>
 800254e:	2b04      	cmp	r3, #4
 8002550:	d003      	beq.n	800255a <HAL_RCC_GetSysClockFreq+0x3a>
 8002552:	e09b      	b.n	800268c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002554:	4b53      	ldr	r3, [pc, #332]	; (80026a4 <HAL_RCC_GetSysClockFreq+0x184>)
 8002556:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002558:	e09b      	b.n	8002692 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800255a:	4b53      	ldr	r3, [pc, #332]	; (80026a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800255c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800255e:	e098      	b.n	8002692 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002560:	4b4f      	ldr	r3, [pc, #316]	; (80026a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002568:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800256a:	4b4d      	ldr	r3, [pc, #308]	; (80026a0 <HAL_RCC_GetSysClockFreq+0x180>)
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d028      	beq.n	80025c8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002576:	4b4a      	ldr	r3, [pc, #296]	; (80026a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	099b      	lsrs	r3, r3, #6
 800257c:	2200      	movs	r2, #0
 800257e:	623b      	str	r3, [r7, #32]
 8002580:	627a      	str	r2, [r7, #36]	; 0x24
 8002582:	6a3b      	ldr	r3, [r7, #32]
 8002584:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002588:	2100      	movs	r1, #0
 800258a:	4b47      	ldr	r3, [pc, #284]	; (80026a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800258c:	fb03 f201 	mul.w	r2, r3, r1
 8002590:	2300      	movs	r3, #0
 8002592:	fb00 f303 	mul.w	r3, r0, r3
 8002596:	4413      	add	r3, r2
 8002598:	4a43      	ldr	r2, [pc, #268]	; (80026a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800259a:	fba0 1202 	umull	r1, r2, r0, r2
 800259e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80025a0:	460a      	mov	r2, r1
 80025a2:	62ba      	str	r2, [r7, #40]	; 0x28
 80025a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025a6:	4413      	add	r3, r2
 80025a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025ac:	2200      	movs	r2, #0
 80025ae:	61bb      	str	r3, [r7, #24]
 80025b0:	61fa      	str	r2, [r7, #28]
 80025b2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80025b6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80025ba:	f7fd fe0b 	bl	80001d4 <__aeabi_uldivmod>
 80025be:	4602      	mov	r2, r0
 80025c0:	460b      	mov	r3, r1
 80025c2:	4613      	mov	r3, r2
 80025c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025c6:	e053      	b.n	8002670 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025c8:	4b35      	ldr	r3, [pc, #212]	; (80026a0 <HAL_RCC_GetSysClockFreq+0x180>)
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	099b      	lsrs	r3, r3, #6
 80025ce:	2200      	movs	r2, #0
 80025d0:	613b      	str	r3, [r7, #16]
 80025d2:	617a      	str	r2, [r7, #20]
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80025da:	f04f 0b00 	mov.w	fp, #0
 80025de:	4652      	mov	r2, sl
 80025e0:	465b      	mov	r3, fp
 80025e2:	f04f 0000 	mov.w	r0, #0
 80025e6:	f04f 0100 	mov.w	r1, #0
 80025ea:	0159      	lsls	r1, r3, #5
 80025ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025f0:	0150      	lsls	r0, r2, #5
 80025f2:	4602      	mov	r2, r0
 80025f4:	460b      	mov	r3, r1
 80025f6:	ebb2 080a 	subs.w	r8, r2, sl
 80025fa:	eb63 090b 	sbc.w	r9, r3, fp
 80025fe:	f04f 0200 	mov.w	r2, #0
 8002602:	f04f 0300 	mov.w	r3, #0
 8002606:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800260a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800260e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002612:	ebb2 0408 	subs.w	r4, r2, r8
 8002616:	eb63 0509 	sbc.w	r5, r3, r9
 800261a:	f04f 0200 	mov.w	r2, #0
 800261e:	f04f 0300 	mov.w	r3, #0
 8002622:	00eb      	lsls	r3, r5, #3
 8002624:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002628:	00e2      	lsls	r2, r4, #3
 800262a:	4614      	mov	r4, r2
 800262c:	461d      	mov	r5, r3
 800262e:	eb14 030a 	adds.w	r3, r4, sl
 8002632:	603b      	str	r3, [r7, #0]
 8002634:	eb45 030b 	adc.w	r3, r5, fp
 8002638:	607b      	str	r3, [r7, #4]
 800263a:	f04f 0200 	mov.w	r2, #0
 800263e:	f04f 0300 	mov.w	r3, #0
 8002642:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002646:	4629      	mov	r1, r5
 8002648:	028b      	lsls	r3, r1, #10
 800264a:	4621      	mov	r1, r4
 800264c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002650:	4621      	mov	r1, r4
 8002652:	028a      	lsls	r2, r1, #10
 8002654:	4610      	mov	r0, r2
 8002656:	4619      	mov	r1, r3
 8002658:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800265a:	2200      	movs	r2, #0
 800265c:	60bb      	str	r3, [r7, #8]
 800265e:	60fa      	str	r2, [r7, #12]
 8002660:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002664:	f7fd fdb6 	bl	80001d4 <__aeabi_uldivmod>
 8002668:	4602      	mov	r2, r0
 800266a:	460b      	mov	r3, r1
 800266c:	4613      	mov	r3, r2
 800266e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002670:	4b0b      	ldr	r3, [pc, #44]	; (80026a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	0c1b      	lsrs	r3, r3, #16
 8002676:	f003 0303 	and.w	r3, r3, #3
 800267a:	3301      	adds	r3, #1
 800267c:	005b      	lsls	r3, r3, #1
 800267e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002680:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002684:	fbb2 f3f3 	udiv	r3, r2, r3
 8002688:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800268a:	e002      	b.n	8002692 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800268c:	4b05      	ldr	r3, [pc, #20]	; (80026a4 <HAL_RCC_GetSysClockFreq+0x184>)
 800268e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002690:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002694:	4618      	mov	r0, r3
 8002696:	3740      	adds	r7, #64	; 0x40
 8002698:	46bd      	mov	sp, r7
 800269a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800269e:	bf00      	nop
 80026a0:	40023800 	.word	0x40023800
 80026a4:	00f42400 	.word	0x00f42400
 80026a8:	017d7840 	.word	0x017d7840

080026ac <memset>:
 80026ac:	4402      	add	r2, r0
 80026ae:	4603      	mov	r3, r0
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d100      	bne.n	80026b6 <memset+0xa>
 80026b4:	4770      	bx	lr
 80026b6:	f803 1b01 	strb.w	r1, [r3], #1
 80026ba:	e7f9      	b.n	80026b0 <memset+0x4>

080026bc <__libc_init_array>:
 80026bc:	b570      	push	{r4, r5, r6, lr}
 80026be:	4d0d      	ldr	r5, [pc, #52]	; (80026f4 <__libc_init_array+0x38>)
 80026c0:	4c0d      	ldr	r4, [pc, #52]	; (80026f8 <__libc_init_array+0x3c>)
 80026c2:	1b64      	subs	r4, r4, r5
 80026c4:	10a4      	asrs	r4, r4, #2
 80026c6:	2600      	movs	r6, #0
 80026c8:	42a6      	cmp	r6, r4
 80026ca:	d109      	bne.n	80026e0 <__libc_init_array+0x24>
 80026cc:	4d0b      	ldr	r5, [pc, #44]	; (80026fc <__libc_init_array+0x40>)
 80026ce:	4c0c      	ldr	r4, [pc, #48]	; (8002700 <__libc_init_array+0x44>)
 80026d0:	f000 f818 	bl	8002704 <_init>
 80026d4:	1b64      	subs	r4, r4, r5
 80026d6:	10a4      	asrs	r4, r4, #2
 80026d8:	2600      	movs	r6, #0
 80026da:	42a6      	cmp	r6, r4
 80026dc:	d105      	bne.n	80026ea <__libc_init_array+0x2e>
 80026de:	bd70      	pop	{r4, r5, r6, pc}
 80026e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80026e4:	4798      	blx	r3
 80026e6:	3601      	adds	r6, #1
 80026e8:	e7ee      	b.n	80026c8 <__libc_init_array+0xc>
 80026ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80026ee:	4798      	blx	r3
 80026f0:	3601      	adds	r6, #1
 80026f2:	e7f2      	b.n	80026da <__libc_init_array+0x1e>
 80026f4:	0800273c 	.word	0x0800273c
 80026f8:	0800273c 	.word	0x0800273c
 80026fc:	0800273c 	.word	0x0800273c
 8002700:	08002740 	.word	0x08002740

08002704 <_init>:
 8002704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002706:	bf00      	nop
 8002708:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800270a:	bc08      	pop	{r3}
 800270c:	469e      	mov	lr, r3
 800270e:	4770      	bx	lr

08002710 <_fini>:
 8002710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002712:	bf00      	nop
 8002714:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002716:	bc08      	pop	{r3}
 8002718:	469e      	mov	lr, r3
 800271a:	4770      	bx	lr
